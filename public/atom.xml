<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aotu.io</title>
  <subtitle>凹凸实验室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aotu.io/"/>
  <updated>2016-11-28T19:26:06.000Z</updated>
  <id>https://aotu.io/</id>
  
  <author>
    <name>凹凸实验室</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css3 animation 属性众妙</title>
    <link href="https://aotu.io/notes/2016/11/28/css3-animation-properties/"/>
    <id>https://aotu.io/notes/2016/11/28/css3-animation-properties/</id>
    <published>2016-11-28T02:00:00.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文不会详细介绍每个 css3 animation 属性（需要了解的同学可先移步 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation" target="_blank" rel="external">MDN</a>），而是结合实际的开发经验，介绍 css3 animation 属性的一些使用场景及技巧。</p>
<h3 id="1-animation-delay"><a href="#1-animation-delay" class="headerlink" title="1. animation-delay"></a>1. animation-delay</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-delay" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>animation-delay CSS 属性定义动画于何时开始，即从动画应用在元素上到动画开始的这段时间的长度。</p>
</blockquote>
<p>该属性值默认为 0s，可为正值，也可为负值。</p>
<h4 id="动画时间轴"><a href="#动画时间轴" class="headerlink" title="动画时间轴"></a>动画时间轴</h4><p>由于 css3 动画没有时间轴，<code>animation-delay</code> 最常见的是用于将动画与其他动画的执行时机错开，将动画落到不同的时间点，形成动画时间轴。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ani--first</span> &#123;</div><div class="line">    <span class="attribute">animation-name</span>: aniFirst;</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ani--second</span> &#123;</div><div class="line">    <span class="attribute">animation-name</span>: aniSecond;</div><div class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-delay</span>: <span class="number">2s</span>; <span class="comment">/* aniSecond 延迟 2s 执行*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>形成的时间轴如下图所示：<br><img src="//misc.aotu.io/Yettyzyt/2016-11-28-css3-animation-properties/animation-delay-timeline.png" alt="动画时间轴"></p>
<h4 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h4><p>css3 animation 亦可实现一些 js 的效果，例如利用 <code>animation-delay</code> 可以实现一个简单的轮播。以下是一个三屏轮播的例子。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.slider__item</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: ani <span class="number">6s</span> infinite linear both;</div><div class="line">    @<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 4 &#123;</div><div class="line">      &amp;:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">        <span class="attribute">animation-delay</span>: (-<span class="number">1</span>+<span class="variable">$i</span>)*<span class="number">2s</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@keyframes ani &#123;</div><div class="line">  0%, 33<span class="selector-class">.33</span>% &#123;<span class="attribute">opacity</span>: <span class="number">1</span>; <span class="attribute">visibility</span>: visible;&#125;</div><div class="line">  33<span class="selector-class">.34</span>%, 100% &#123;<span class="attribute">opacity</span>: <span class="number">0</span>; <span class="attribute">visibility</span>: hidden;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="368" data-theme-id="0" data-slug-hash="KNvRxZ" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="KNvRxZ" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/KNvRxZ/" target="_blank" rel="external">KNvRxZ</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h4 id="序列动画"><a href="#序列动画" class="headerlink" title="序列动画"></a>序列动画</h4><p>多个元素使用相同的动画效果时，将动画执行时机依次错开，可形成整齐有序的序列动画效果。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 6 &#123;</div><div class="line">  <span class="selector-class">.list__item</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">    <span class="attribute">animation-delay</span>: (-<span class="number">1</span>+<span class="variable">$i</span>)*<span class="number">0.1s</span>; <span class="comment">/*计算每个元素的 animation-delay */</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="BQWZWz" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="listAni" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/BQWZWz/" target="_blank" rel="external">listAni</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>以笔者开发的<a href="http://jdc.jd.com/h5/jd-campus-2017/international/index.html" target="_blank" rel="external">京东2017海外招聘</a>项目为例，第二屏的菜单和第三屏的时间轴的进退场动画都运用了序列动画。下图展示第三屏时间轴的进场效果，有兴趣的同学亦可扫码观看完整案例。</p>
<p><img src="//misc.aotu.io/Yettyzyt/2016-11-28-css3-animation-properties/animation-delay-campus.gif" alt="京东2017海外招聘"></p>
<h4 id="无限循环的序列动画"><a href="#无限循环的序列动画" class="headerlink" title="无限循环的序列动画"></a>无限循环的序列动画</h4><p><code>animation-delay</code> 可为负值。<strong>负值会让动画从它的动画序列中某位置立即开始。</strong> 巧用这个负值，可以解决实际开发中的一些问题。</p>
<p>如若上述的序列动画要进行无限循环，单纯将 <code>animation-iteration-count</code> 设置为 <code>infinite</code>，动画开始时会有延迟。此时，将 <code>animation-delay</code> 设置为负值，提前动画开始执行的时机，当用户看到动画时，动画便已经处于进行中的状态。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 6 &#123;</div><div class="line">  <span class="selector-class">.list__item</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">    <span class="attribute">animation-delay</span>: -<span class="variable">$i</span>*<span class="number">0.1s</span>; <span class="comment">/* animation-delay 为负值*/</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="VmpMEE" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="listAniInfinite" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/VmpMEE/" target="_blank" rel="external">listAniInfinite</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h4 id="调试动画"><a href="#调试动画" class="headerlink" title="调试动画"></a>调试动画</h4><p>将 <code>animation-play-state</code> 设置为 <code>paused</code>，<code>animation-delay</code> 设置成不同的负值，可以查看动画在不同帧时的状态，便于进行动画调试。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list__item</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: listAni <span class="number">0.5s</span> linear both alternate infinite;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div><div class="line">@for <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">6</span> &#123;</div><div class="line">    <span class="selector-class">.list--first</span> <span class="selector-class">.list__item</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">        <span class="attribute">animation-delay</span>: -<span class="variable">$i</span>*<span class="number">0.1s</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@for <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">6</span> &#123;</div><div class="line">    <span class="selector-class">.list--second</span> <span class="selector-class">.list__item</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">        <span class="attribute">animation-delay</span>: (-<span class="number">2</span>-<span class="variable">$i</span>)*<span class="number">0.1s</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@for <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">6</span> &#123;</div><div class="line">    <span class="selector-class">.list--third</span> <span class="selector-class">.list__item</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">        <span class="attribute">animation-delay</span>: (-<span class="number">4</span>-<span class="variable">$i</span>)*<span class="number">0.1s</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="ObprrZ" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="listAniPaused" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/ObprrZ/" target="_blank" rel="external">listAniPaused</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h3 id="2-animation-fill-mode"><a href="#2-animation-fill-mode" class="headerlink" title="2. animation-fill-mode"></a>2. animation-fill-mode</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>animation-fill-mode 这个 CSS 属性用来指定在动画执行之前和之后如何给动画的目标应用样式。</p>
</blockquote>
<p><code>animation-fill-mode</code> 应该算是 <code>animation</code> 属性里比较难上手的一个，但它的作用却很大。</p>
<h4 id="保持结束状态"><a href="#保持结束状态" class="headerlink" title="保持结束状态"></a>保持结束状态</h4><p>“动画结束后，突然跳回第一帧！” 很多刚接触 css3 动画的同学，都是在这个场景下，接触了 <code>animation-fill-mode</code> 属性。将 <code>animation-fill-mode</code> 设置为 <code>forwards</code>，动画执行结束后保持最后一帧的样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ani-area__item--forwards</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: ani <span class="number">1s</span> ease;</div><div class="line">    <span class="attribute">animation-fill-mode</span>: forwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="MbmvQL" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="MbmvQL" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/MbmvQL/" target="_blank" rel="external">MbmvQL</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h4 id="开始前状态"><a href="#开始前状态" class="headerlink" title="开始前状态"></a>开始前状态</h4><p>开发动画时，我们都是先根据视觉稿做好构建，再来给元素加动画的。如上文所述，可通过 <code>animation-delay</code> 来延迟的动画的执行。而在执行前，元素往往需要先隐藏（<code>translate</code> 定位到视窗外 / <code>opacity</code> 设置为 0 / <code>scale</code> 设置为 0 等）。若将隐藏元素的样式直接应用到元素上，一来不利于构建，二来对于不支持动画的浏览器来说，只会呈现一片空白。此时，<code>animation-fill-mode</code> 的 <code>backwards</code> 属性值便派上用场。</p>
<p>对于 <code>backwards</code> 的解释，笔者见过不少文章的说法都有不妥之处，认为 <code>backwards</code> 与  <code>forwards</code> 相反，表示动画执行结束后保持第一帧的样式。实则不然，我们看下 <a href="http://www.w3school.com.cn/cssref/pr_animation-fill-mode.asp" target="_blank" rel="external">w3c</a> 的解释：</p>
<blockquote>
<p>backwards：在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</p>
</blockquote>
<p>换句话说，<code>backwards</code> 作用的是 <code>animation-delay</code> 的时间段，应用第一个关键帧的样式。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ani-area__item--backwards</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: ani <span class="number">1s</span> <span class="number">1s</span> ease;</div><div class="line">    <span class="attribute">animation-fill-mode</span>: backwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="YpVxpw" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="YpVxpw" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/YpVxpw/" target="_blank" rel="external">YpVxpw</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>当然，动画的第一帧和最后一帧的计算还受 <code>animation-direction</code> 和 <code>animation-iteration-count</code> 的影响，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode" target="_blank" rel="external">MDN</a> 中有详细解释：</p>
<blockquote>
<p>forwards</p>
<table>
<thead>
<tr>
<th>animation-direction</th>
<th>animation-iteration-count</th>
<th>last keyframe encountered</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>even or odd</td>
<td>100% or to</td>
</tr>
<tr>
<td>reverse</td>
<td>even or odd</td>
<td>0% or from</td>
</tr>
<tr>
<td>alternate</td>
<td>even</td>
<td>0% or from</td>
</tr>
<tr>
<td>alternate</td>
<td>odd</td>
<td>100% or to</td>
</tr>
<tr>
<td>alternate-reverse</td>
<td>even</td>
<td>100% or to</td>
</tr>
<tr>
<td>alternate-reverse</td>
<td>odd</td>
<td>0% or from</td>
</tr>
</tbody>
</table>
<p>backwards</p>
<table>
<thead>
<tr>
<th>animation-direction</th>
<th>first relevant keyframe</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal or alternate</td>
<td>0% or from</td>
</tr>
<tr>
<td>reverse or alternate-reverse</td>
<td>100% or to</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="3-animation-direction"><a href="#3-animation-direction" class="headerlink" title="3. animation-direction"></a>3. animation-direction</h3><p>既然上表中涉及了 <code>animation-direction</code> 属性，那我们就顺着来研究一下它。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>animation-direction CSS 属性指示动画是否反向播放。</p>
</blockquote>
<h4 id="进-退场动画复用"><a href="#进-退场动画复用" class="headerlink" title="进/退场动画复用"></a>进/退场动画复用</h4><p>动画元素有进场动画，往往也会需要退场动画。比较常见的做法，退场时使用与进场动画反向的动画。<code>animation-direction</code> 的 <code>reverse</code> 属性值可简单实现反向动画。</p>
<p>先看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>reverse：反向运行动画，每周期结束动画由尾到头运行。</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.on</span> &#123;</div><div class="line">  <span class="selector-class">.ani--translate</span> &#123;</div><div class="line">      <span class="attribute">animation</span>: aniTranslate <span class="number">1s</span> ease forwards;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.off</span> &#123;</div><div class="line">  <span class="selector-class">.ani--translate</span> &#123;</div><div class="line">      <span class="attribute">animation</span>: aniTranslate <span class="number">1s</span> ease forwards reverse;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@keyframes aniTranslate &#123;</div><div class="line">  <span class="number">0%</span> &#123; <span class="attribute">transform</span>: translateY(<span class="number">300px</span>) &#125;</div><div class="line">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: translateY(<span class="number">0</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wrap</span>.removeClass(<span class="string">'on'</span>);</div><div class="line"><span class="variable">$wrap</span>.innerWidth(<span class="variable">$wrap</span>.innerWidth); <span class="regexp">/* 使用 reflow 重新触发一下 animation */</span></div><div class="line"><span class="variable">$wrap</span>.addClass(<span class="string">'off'</span>);</div></pre></td></tr></table></figure>
<p></p><p data-height="265" data-theme-id="0" data-slug-hash="YpQqKZ" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="YpQqKZ" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/YpQqKZ/" target="_blank" rel="external">YpQqKZ</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>当然，上述例子为了演示方便，只是简单做了只有两帧的动画，这种效果用 <code>transition</code> 同样可以实现。</p>
<h3 id="4-animation-play-state"><a href="#4-animation-play-state" class="headerlink" title="4. animation-play-state"></a>4. animation-play-state</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>animation-play-state CSS 属性定义一个动画是否运行或者暂停。</p>
</blockquote>
<h4 id="翻页动画控制"><a href="#翻页动画控制" class="headerlink" title="翻页动画控制"></a>翻页动画控制</h4><p>在做翻页 h5 时，需要对动画的播放进行控制。只有当用户进入当前屏时，动画才开始播放。通常我们会给当前屏加上一个 <code>acitve</code> 类，用来给元素添加动画：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.active</span> <span class="selector-class">.ele</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: ani <span class="number">1s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者如上文“进/退场动画复用”中的例子，分别用 <code>on</code> 和 <code>off</code> 控制进/退场动画。这都是常见的思路。<br>如果是不需要重复触发的动画，用 <code>animation-play-state</code> 同样可以实现动画的控制。动画属性直接添加到元素上， <code>animation-play-state</code> 默认设置为 <code>paused</code>，当进入当前屏时，将 <code>animation-play-state</code> 设置为 <code>running</code> 即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ani</span> &#123; </div><div class="line">    <span class="attribute">animation</span>: ani1 <span class="number">1s</span> ease;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused; <span class="comment">/* animation-play-state 默认设置为 paused */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.active</span> <span class="selector-class">.ani</span> &#123;</div><div class="line">    <span class="attribute">animation-play-state</span>: running; <span class="comment">/* 进入当前屏，animation-play-state 设置为 running */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><p data-height="572" data-theme-id="0" data-slug-hash="vymWwE" data-default-tab="css,result" data-user="Yetty" data-embed-version="2" data-pen-title="vymWwE" class="codepen">See the Pen <a href="http://codepen.io/Yetty/pen/vymWwE/" target="_blank" rel="external">vymWwE</a> by Yetty (<a href="http://codepen.io/Yetty" target="_blank" rel="external">@Yetty</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<h4 id="轮播的交互"><a href="#轮播的交互" class="headerlink" title="轮播的交互"></a>轮播的交互</h4><p>在前文介绍 <code>animation-delay</code> 时，提到了一个轮播的例子，当用户 <code>hover</code> 时，轮播动画应该暂停，用 <code>animation-play-state</code> 属性便可轻松实现交互：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.slider</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.slider__item</span>&#123; </div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-animation-timing-function"><a href="#5-animation-timing-function" class="headerlink" title="5. animation-timing-function"></a>5. animation-timing-function</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function" target="_blank" rel="external">MDN</a> 中的介绍：</p>
<blockquote>
<p>CSS animation-timing-function 属性定义 CSS 动画在每一动画周期中执行的节奏。</p>
</blockquote>
<p>关于 <code>animation-timing-function</code>，有一个特别需要注意的点，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function" target="_blank" rel="external">MDN</a> 中有强调：</p>
<blockquote>
<p>对于关键帧动画来说，timing function 作用于一个关键帧周期而非整个动画周期，即从关键帧开始开始，到关键帧结束结束。</p>
</blockquote>
<p>也就是说，<code>animation-timing-function</code> 是作用于 <code>@keyframes</code> 中设置的两个关键帧之间的，这一点在该属性值为 <code>steps()</code> 时可明显感知。 </p>
<h4 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h4><p><code>animation-timing-function</code> 最让人感到惊（beng）艳（kui）的莫过于 <code>steps()</code> 属性值。利用 <code>steps()</code>，可以轻松实现逐帧动画（又称“精灵动画”），从而告别不可控的 gif 时代。<br>关于逐帧动画，笔者之前在<a href="//aotu.io/">凹凸实验室</a>平台已经发布过相关文章介绍，此处不再赘述，有兴趣的同学可前往围观：<a href="//aotu.io/notes/2016/05/17/css3-animation-frame/">《CSS3逐帧动画》</a>。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://css-tricks.com/debugging-css-keyframe-animations/" target="_blank" rel="external">Debugging CSS Keyframe Animations - SARAH DRASNER</a></li>
<li><a href="http://isux.tencent.com/css-animation-skills.html" target="_blank" rel="external">多屏复杂动画CSS技巧三则 - zhangxinxu</a></li>
<li><a href="https://isux.tencent.com/html5-animation-performance-analysis.html" target="_blank" rel="external">打造H5动感影集的爱恨情仇(动画性能篇) －TQ</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文不会详细介绍每个 css3 animation 属性（需要了解的同学可先移步 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="动画" scheme="https://aotu.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>FIGlet初识</title>
    <link href="https://aotu.io/notes/2016/11/22/figlet/"/>
    <id>https://aotu.io/notes/2016/11/22/figlet/</id>
    <published>2016-11-22T09:33:00.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>FIGlet这个词诂计对于很多前端工程师来说可能比较陌生，但在计算机领域中常常见到。早在十几年前就已经开始有许多利用文字与线条组成的图形，当时甚至用 ASCII 来表示颜色，然而到了今天也被广范使用。</p>
<a id="more"></a>
<h2 id="FIGlet是什么？"><a href="#FIGlet是什么？" class="headerlink" title="FIGlet是什么？"></a>FIGlet是什么？</h2><p>「FIGlet」是基于<code>ASCII</code>字符组成的字符画。它的名字由来，其实有几个固定的名称，几种比较主要的称呼分别是：「ASCII TEXT」、「ASCII TEXT Banner」、「ASCII Art」、「ASCII Decorator」和「FIGlet」。然而「FIGlet」这个词应该是最标准的用法，因为维基百科上有相关介绍 ( <a href="https://en.wikipedia.org/wiki/FIGlet" target="_blank" rel="external">https://en.wikipedia.org/wiki/FIGlet</a> )。「FIGlet」原作者是Glenn Chappell、Ian Chai，源于 Frank、Ian 和 Glen当初在写邮件签名的时候加上去的一些字体艺术。 ( 參考：<a href="http://www.figlet.org/figlet_history.html" target="_blank" rel="external">http://www.figlet.org/figlet_history.html</a>)</p>
<p><img src="https://misc.aotu.io/youing/20161122/1.png" alt="FAQ"></p>
<h3 id="FIGlet的历史"><a href="#FIGlet的历史" class="headerlink" title="FIGlet的历史"></a>FIGlet的历史</h3><p>「FIGlet」在1991年春天，仅仅是一个只有170行用C语言编写的小程序，当时叫做<code>newban</code>，作者认为它是一个可以长期使用于互联网中的程序，然后用带“新”的英文不太合适，于是后来称之为<code>FIGlet 1.0</code>。当时的版本只有一个字体并且仅仅包含了一些小写字母。</p>
<p>于是1993年的时候，决定重写「FIGlet」，花了7个月的时间整理了13个字体以及相关文档，因此<code>FIGlet 2.0</code>正式版也正式诞生。</p>
<p>当时「FIGlet」像暴风一样席卷互联网，每周都有新的字体涌现，不少人自愿把figlet这个功能接入到<code>non-Unix</code>当中，当然还有一些bug的报告。因为这些从而使得「FIGlet」更加国际化，所以在<code>FIGlet 2.1</code>中加入了支持非ASCII字符，还有从右到左打印等功能。直至今天最新版本是2.2.5，可以从<a href="http://www.figlet.org/" target="_blank" rel="external">官方网站</a>找到相关代码的<a href="ftp://ftp.figlet.org/pub/figlet/program/unix/figlet-2.2.5.tar.gz" target="_blank" rel="external">下载地址</a>。</p>
<h2 id="FIGlet如何制作"><a href="#FIGlet如何制作" class="headerlink" title="FIGlet如何制作"></a>FIGlet如何制作</h2><p>接下来就是介绍生成这样的字符图形的几种方式：</p>
<h3 id="在线生成"><a href="#在线生成" class="headerlink" title="在线生成"></a>在线生成</h3><p>除了字体，其实也有不少图片转为ASCII的工具，有兴趣的可以参考一下 <a href="https://en.wikipedia.org/wiki/ASCII_art" target="_blank" rel="external">ASCII Art</a>，或者是这个网站：<a href="http://picascii.com/" target="_blank" rel="external">http://picascii.com/</a>，都是通过程序帮我们实现。可以看一下<a href="http://picascii.com/" target="_blank" rel="external">picascii.com</a>这个网站转出来的效果</p>
<p><img src="https://misc.aotu.io/youing/20161122/2.png" alt="效果"></p>
<h3 id="利用编辑器"><a href="#利用编辑器" class="headerlink" title="利用编辑器"></a>利用编辑器</h3><p>目前一些比较流行的编辑器如<code>Sublime</code>、<code>VSCODE</code>、<code>Atom</code>等都有相关的插件帮助我们生成字符图形，例如在VSCODE中在插件管理，搜索<code>“VSC Figlet”</code>并安装</p>
<p><img src="https://misc.aotu.io/youing/20161122/4.jpg" alt="效果"></p>
<p>然后在MAC下通过快捷键<code>command+shift+p</code>调出令命面板,输入查找<code>“VSC Figlet”</code></p>
<p><img src="https://misc.aotu.io/youing/20161122/5.jpg" alt="VSC Figlet"></p>
<p>然后输入根据提示，输入您想要转换的字符</p>
<p><img src="https://misc.aotu.io/youing/20161122/6.jpg" alt="您想要转换的字符"></p>
<p>选择一种字体效果</p>
<p><img src="https://misc.aotu.io/youing/20161122/7.jpg" alt="选择一种字体效果"></p>
<p>最终效果如下</p>
<p><img src="https://misc.aotu.io/youing/20161122/8.jpg" alt="效果"></p>
<h3 id="使用Node-js"><a href="#使用Node-js" class="headerlink" title="使用Node.js"></a>使用Node.js</h3><p>作为一名高逼格的前端工程师，想必看一下<strong>Node.js</strong>里面有没有相关的模块，于是去<a href="https://www.npmjs.com/" target="_blank" rel="external"><strong>npm</strong></a>上搜了一把，结果更新频率比较高的，有这个名叫<strong>figlet</strong>的npm包</p>
<p><img src="https://misc.aotu.io/youing/20161122/13.jpg" alt="figlet"></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> figlet</div></pre></td></tr></table></figure>
<p> 简单示例</p>
 <figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> var figlet = require('figlet')<span class="comment">;</span></div><div class="line"> </div><div class="line">figlet('JDC O2 Team', function(<span class="name">err</span>, data) &#123;</div><div class="line">    if (<span class="name">err</span>) &#123;</div><div class="line">        console.log('Something went wrong...')<span class="comment">;</span></div><div class="line">        console.dir(<span class="name">err</span>)<span class="comment">;</span></div><div class="line">        return<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    console.log(<span class="name">data</span>)</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p> 输出</p>
 <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">     _ ____   ____    ___ ____    _____                    </div><div class="line">    |<span class="string"> </span>|<span class="string">  _ \ / ___</span>|<span class="string">  / _ \___ \  </span>|<span class="string">_   _</span>|<span class="string">__  __ _ _ __ ___  </span></div><div class="line"> _  |<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">     </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">__) </span>|<span class="string">   </span>|<span class="string"> </span>|<span class="string">/ _ \/ _` </span>|<span class="string"> '_ ` _ \ </span></div><div class="line">|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">___  </span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> / __/    </span>|<span class="string"> </span>|<span class="string">  __/ (_</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|</div><div class="line"> \___/|<span class="string">____/ \____</span>|<span class="string">  \___/_____</span>|<span class="string">   </span>|<span class="string">_</span>|<span class="string">\___</span>|<span class="string">\__,_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|</div></pre></td></tr></table></figure>
<p>也可以直接安装命令行</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g figlet-<span class="keyword">cli</span></div></pre></td></tr></table></figure>
<p>这里输入<a href="https://aotu.io"><strong>凹凸实验室</strong></a>出品－前端自动化流程构建工具<a href="https://athena.aotu.io/" target="_blank" rel="external">「Athena」</a>的名称看看</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">figlet</span> <span class="string">"Athena"</span></div></pre></td></tr></table></figure>
<p>输出效果<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="symbol">_</span>   <span class="symbol">_</span>   <span class="symbol">_</span>                      </div><div class="line">   / \ | |<span class="symbol">_</span>| |<span class="symbol">__</span>   ___ <span class="symbol">_</span> <span class="symbol">__</span>   <span class="symbol">__</span> <span class="symbol">_</span> </div><div class="line">  / <span class="symbol">_</span> \| <span class="symbol">__</span>| '<span class="symbol">_</span> \ / <span class="symbol">_</span> \ '<span class="symbol">_</span> \ / <span class="symbol">_</span>` |</div><div class="line"> / ___ \ |<span class="symbol">_</span>| | | |  <span class="symbol">__</span>/ | | | (<span class="symbol">_</span>| |</div><div class="line">/<span class="symbol">_</span>/   \<span class="symbol">_</span>\<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|\___|<span class="symbol">_</span>| |<span class="symbol">_</span>|\<span class="symbol">__</span>,<span class="symbol">_</span>|</div></pre></td></tr></table></figure></p>
<p>效果是不是跟官方配图很像。</p>
<p><img src="https://misc.aotu.io/youing/20161122/15.jpg" alt="Athena"></p>
<h4 id="在浏览器中使用"><a href="#在浏览器中使用" class="headerlink" title="在浏览器中使用"></a>在浏览器中使用</h4><p>如果想直接做一个类似的在线转换工具，可以参考一下网页版本<a href="http://patorjk.com/software/taag/" target="_blank" rel="external">http://patorjk.com/software/taag/</a>，里面主要用到<code>figlet.js</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/fetch/1.0.0/fetch.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"figlet.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"> </div><div class="line">    figlet(inputText, <span class="string">'Standard'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, text</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'something went wrong...'</span>);</div><div class="line">            <span class="built_in">console</span>.dir(err);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(text);</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="FIGlet的应用"><a href="#FIGlet的应用" class="headerlink" title="FIGlet的应用"></a>FIGlet的应用</h2><ul>
<li>chrome开发者工具里面的控制台输出。</li>
<li>Sublime Text等具有右侧快速定位视图功能的编辑器，如果你代码很长的时候，可以使用figlet来做个说明隔开，那找起代码来更加一目了然了。</li>
<li>当你写封纯文字邮件的时候，可以加入figlet字符让邮件更加生动一些。</li>
<li>在终端中的打印字符图形，如登录服务器后的字符提示。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到这里，这绝对不是一篇软文，相信你至少能从文章中学习到一点小知识。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/FIGlet" target="_blank" rel="external">https://en.wikipedia.org/wiki/FIGlet</a></li>
<li><a href="https://www.npmjs.com/package/figlet" target="_blank" rel="external">https://www.npmjs.com/package/figlet</a></li>
<li><a href="http://patorjk.com/software/taag" target="_blank" rel="external">http://patorjk.com/software/taag</a></li>
<li><a href="https://en.wikipedia.org/wiki/ASCII_art" target="_blank" rel="external">https://en.wikipedia.org/wiki/ASCII_art</a></li>
<li><a href="http://www.figlet.org/" target="_blank" rel="external">http://www.figlet.org/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FIGlet这个词诂计对于很多前端工程师来说可能比较陌生，但在计算机领域中常常见到。早在十几年前就已经开始有许多利用文字与线条组成的图形，当时甚至用 ASCII 来表示颜色，然而到了今天也被广范使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="FIGlet" scheme="https://aotu.io/tags/FIGlet/"/>
    
      <category term="ASCII Decorator" scheme="https://aotu.io/tags/ASCII-Decorator/"/>
    
      <category term="ASCII Art" scheme="https://aotu.io/tags/ASCII-Art/"/>
    
      <category term="字符图形" scheme="https://aotu.io/tags/%E5%AD%97%E7%AC%A6%E5%9B%BE%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>三看 SVG Web 动效</title>
    <link href="https://aotu.io/notes/2016/11/22/SVG_Web_Animation/"/>
    <id>https://aotu.io/notes/2016/11/22/SVG_Web_Animation/</id>
    <published>2016-11-22T09:33:00.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3 动效玩腻了吗？没关系的，我们还有 SVG。</p>
<a id="more"></a>
<p><a href="http://www.welikesmall.com/" target="_blank" rel="external">Welikesmall</a> 是一个互联网品牌宣传代理，这是我见过的最喜欢使用 SVG 做动效的网页设计团队。事实上，越来越多的网页动效达人选择在 SVG 的疆土上开辟动效的土壤，即便 SMIL 寿将终寝，事实上这反而将 SVG 动效推向了一个新的世界：CSS3 Animation + SVG。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/1479630242685.png" alt="Alt text"></p>
<p>（<a href="https://css-tricks.com/smil-is-dead-long-live-smil-a-guide-to-alternatives-to-smil-features/" target="_blank" rel="external">SMIL is dead! Long live SMIL! A Guide to Alternatives to SMIL Features</a>）</p>
<p>还记得我在久远的<a href="https://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/">《以电影之眼看 CSS3 动画》</a>中说道：“CSS3 动画简直拥有了整个世界！”那么带上 SVG 的 CSS3 动画则已突破天际向着宇宙级的可能性前进（感觉给自己挖了一个无比巨大的坑，网页动画界可不敢再出新技术了[扶额]）。</p>
<p>CSS 与 SVG 的打通无疑将 html 代码的可读性又推上一个台阶，我们可以通过 CSS 控制 SVG 图形的尺寸、填色、边框色、过渡、移动变幻等相当实用的各种属性，除此之外，将图形分解的动画在这种条件下也变得相当简单。</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>本文将讲到三个动效例子：</p>
<ul>
<li><a href="http://codepen.io/lyxuncle/pen/wozzrV" target="_blank" rel="external"><strong>箭头</strong>描线动效</a></li>
<li><a href="http://codepen.io/lyxuncle/pen/qqbopp" target="_blank" rel="external"><strong>播放按钮</strong>滤镜动效</a></li>
<li><a href="http://codepen.io/lyxuncle/pen/bBejZZ" target="_blank" rel="external"><strong>虚线</strong>描线动效</a></li>
</ul>
<p>动效来源：<a href="http://www.welikesmall.com/work/adobe/" target="_blank" rel="external">WLS-Adobe</a></p>
<p>即将聊到的 SVG 标签：</p>
<ul>
<li><code>&lt;path&gt;</code></li>
<li><code>&lt;g&gt;</code></li>
<li><code>&lt;symbol&gt;</code></li>
<li><code>&lt;defs&gt;</code></li>
<li><code>&lt;use&gt;</code></li>
<li><code>&lt;clipPath&gt;</code></li>
<li><code>&lt;mask&gt;</code></li>
</ul>
<p>以及属性：</p>
<ul>
<li><code>viewBox</code></li>
<li><code>preserveAspectRatio</code></li>
<li><code>fill</code></li>
<li><code>stroke</code></li>
<li><code>stroke-dasharray</code></li>
<li><code>stroke-dashoffset</code></li>
<li><code>d</code></li>
<li><code>clip-path</code></li>
<li><code>mask</code></li>
</ul>
<h2 id="从一个简单的例子说起"><a href="#从一个简单的例子说起" class="headerlink" title="从一个简单的例子说起"></a>从一个简单的例子说起</h2><p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/arrow_hover_svg.gif" alt="arrow hover"></p>
<p>要做出这样的效果，第一步是将图形画出来。徒手敲代码这种事还是留给图形工具来做，但是，为了更好地控制与制作动效，咱至少要做到读懂 SVG 代码。</p>
<p>SVG 的基本格式是使用 <code>&lt;svg&gt;</code> 标签对代码进行包裹，可直接将代码段插入 html 中，也可以保存成 svg 文件之后使用 <code>img</code>、<code>object</code> 进行引用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span>   </div><div class="line">  <span class="comment">&lt;!-- SVG markup here. --&gt;</span>    </div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于交互动效所需，这里仅介绍直接使用 <code>svg</code> 标签的情况。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"90"</span> <span class="attr">height</span>=<span class="string">"13"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 89.4 12.4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"6.2"</span> <span class="attr">x2</span>=<span class="string">"59.6"</span> <span class="attr">y2</span>=<span class="string">"6.2"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"54.7"</span> <span class="attr">y1</span>=<span class="string">"0.7"</span> <span class="attr">x2</span>=<span class="string">"60.5"</span> <span class="attr">y2</span>=<span class="string">"6.5"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"54.7"</span> <span class="attr">y1</span>=<span class="string">"11.7"</span> <span class="attr">x2</span>=<span class="string">"60.5"</span> <span class="attr">y2</span>=<span class="string">"5.8"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是箭头的代码段，使用了最简单的线条进行绘制。可以看到其中包裹了许多坐标样的属性值。有坐标就意味着有坐标系。</p>
<p>SVG 的坐标系存在三个概念：视窗、视窗坐标系、用户坐标系。视窗坐标系与用户坐标系属于 SVG 的两种坐标系统，默认情况下这两个坐标系的点是一一对应的。与 web 其他坐标系相同，原点位于视窗的左上角，x 轴水平向右，y 轴垂直向下。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/Canvas_default_grid.png" alt="Canvas Default Grid"></p>
<p>（图片来源：<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Positions" target="_blank" rel="external">MDN-SVG Tutorial-Positions</a>）</p>
<p>SVG 的位置、大小与文档流中的块级元素相同，都可由 CSS 进行控制。</p>
<p>视窗即为在页面中 SVG 设定的尺寸可见部分，默认情况下 SVG 超出隐藏。</p>
<p>SVG 能通过 viewBox 属性就完成图形的位移与缩放。</p>
<blockquote>
<p>viewBox属性值的格式为(x0,y0,u_width,u_height)，每个值之间用逗号或者空格隔开，它们共同确定了视窗显示的区域：视窗左上角坐标设为(x0,y0)、视窗的宽设为 u_width，高为 u_height；这个变换对整个视窗都起作用。</p>
</blockquote>
<p>下图展示了当 viewBox 尺寸与 SVG 尺寸相同、放大一倍、缩小一倍时的表现：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/viewBox1-1.gif" alt="viewBox 1:1"></p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/viewBox1-2.gif" alt="viewBox 1:2"></p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/viewBox2-1.gif" alt="viewBox 2:1"></p>
<p>一句话总结，就是用户坐标系需要以某种方式铺满整个视窗。默认的方式是以最短边为准铺满，也就是类似 background-size 中的 cover 值。通过 <code>preserveAspectRatio</code> 属性你可以控制用户坐标系的展开方式与位置，完美满足你的各种需求。</p>
<blockquote>
<p>preserveAspectRatio 是一個以對齊為主，然後再選擇要自動填滿還是咖掉的屬性。——引用来源<a href="http://www.oxxostudio.tw/articles/201409/svg-23-viewpoint-viewBox.html" target="_blank" rel="external">《SVG 研究之路 (23) - 理解 viewport 與 viewbox》</a></p>
</blockquote>
<p>属性的语法如下：<code>preserveAspectRatio=&quot;[defer] &lt;align&gt; [&lt;meetOrSlice&gt;]&quot;</code></p>
<p>注意3个参数之间需要使用空格隔开。</p>
<blockquote>
<p><strong><code>defer</code></strong>：可选参数，只对 <code>image</code> 元素有效，如果 <code>image</code> 元素中 <code>preserveAspectRatio</code> 属性的值以 <code>defer</code> 开头，则意味着 <code>image</code> 元素使用引用图片的缩放比例，如果被引用的图片没有缩放比例，则忽略 <code>defer</code>。所有其他的元素都忽略这个字符串。</p>
<p><strong>meetOrSlice</strong>：可选参数，可以去下列值：</p>
<ul>
<li><code>meet</code> - 默认值，统一缩放图形，让图形全部显示在 viewport 中。</li>
<li><code>slice</code> - 统一缩放图形，让图形充满 viewport，超出的部分被剪裁掉。</li>
</ul>
<p>——引用来源<a href="http://www.cnblogs.com/dxy1982/archive/2012/05/07/2395732.html" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门6 - 坐标与变换》</a></p>
</blockquote>
<p><strong>align</strong>：必选参数。由两个名词组成。</p>
<blockquote>
<p>這兩個名詞分別代表 viewbox 與 viewport 的 x 方向對齊模式，以及 y 方向的對齊模式，換句話說，可以想成：「水平置中 + 垂直靠上對齊」的這種感覺，不過在這個 align 的表現手法倒是很抽象，可以用下方的表格看出端倪：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/preserveAspectRatio-align.png" alt="preserveAspectRatio align"></p>
<p>也因此我們要做一個「水平置中 + 垂直靠上對齊」的 viewbox 設定，就必須寫成：xMidYMin，做一個「水平靠右對齊 + 垂直靠下對齊」的 viewbox 設定，就必須寫成：xMaxYMax，不過這裡有個細節請特別注意，「Y」是大寫呀！真是不知道為什麼會這樣設計，我想或許跟命名規則有關吧！</p>
<p>——引用来源<a href="http://www.oxxostudio.tw/articles/201409/svg-23-viewpoint-viewBox.html" target="_blank" rel="external">《SVG 研究之路 (23) - 理解 viewport 與 viewbox》</a></p>
</blockquote>
<p>下图诠释了各种填充的效果：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/PreserveAspectRatio.png" alt="PreserveAspectRatio"></p>
<p>（图片来源：<a href="https://www.w3.org/TR/SVG/coords.html" target="_blank" rel="external">7 Coordinate Systems, Transformations and Units</a>）</p>
<p>在这一层面处理好图形的展示之后，剩下的所有变换，无论是 translate、rotate 还是 opacity，我们都可以全权交给 CSS 来处理，并且可以将图形细化到形状或者路径的层面进行变换。</p>
<p>然而实际情况是，刚才的那段代码，放进codepen之后是什么也看不见的，原因就在于这个路径的绘制既没有填充颜色也没有描边。</p>
<h3 id="填充——fill"><a href="#填充——fill" class="headerlink" title="填充——fill"></a>填充——<code>fill</code></h3><p><code>fill</code> 属性用于给形状填充颜色。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svg</span> <span class="selector-tag">line</span> &#123;</div><div class="line">	<span class="attribute">fill</span>: <span class="number">#000</span>; <span class="comment">/* 填充黑色 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>填充色的透明度通过 <code>fill-opacity</code> 设置。</p>
<blockquote>
<p><code>fill-rule</code> 用于设置填充方式，算法较为抽象，除了 <code>inherit</code> 这个取值，还可取以下两种值：</p>
<p><code>nonzero</code>：这个值采用的算法是：从需要判定的点向任意方向发射线，然后计算图形与线段交点的处的走向；计算结果从0开始，每有一个交点处的线段是从左到右的，就加1；每有一个交点处的线段是从右到左的，就减1；这样计算完所有交点后，如果这个计算的结果不等于0，则该点在图形内，需要填充；如果该值等于0，则在图形外，不需要填充。看下面的示例：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/1479651074890.png" alt="Alt text"></p>
<p><code>evenodd</code>：这个值采用的算法是：从需要判定的点向任意方向发射线，然后计算图形与线段交点的个数，个数为奇数则改点在图形内，需要填充；个数为偶数则点在图形外，不需要填充。看下图的示例：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/1479651086456.png" alt="Alt text"></p>
<p>——引用来源<a href="http://www.cnblogs.com/dxy1982/archive/2012/04/14/2395734.html" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门4 - 笔画与填充》</a></p>
</blockquote>
<p>然而我们发现，我们的箭头即使填充了颜色，还是什么也看不见，问题就出在我们绘制的时候使用了没有面积的 <code>line</code> 标签。这个时候，就需要出动描边了。</p>
<h3 id="描边——stroke"><a href="#描边——stroke" class="headerlink" title="描边——stroke"></a>描边——<code>stroke</code></h3><p>这个 <code>stroke</code> 可得大书特书，因为光是这个 <code>stroke</code> 就能搞定80%的描线动效。</p>
<p>直接通过 <code>stroke</code> 设置描边色，我们就能立刻看到刚才的箭头了。通过 <code>stroke-width</code> 则可以对描边的粗细进行修改。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svg</span> <span class="selector-tag">line</span> &#123;</div><div class="line">  <span class="attribute">stroke</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">stroke-width</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/arrow.png" alt="arrow"></p>
<h4 id="线的虚实：stroke-dasharray"><a href="#线的虚实：stroke-dasharray" class="headerlink" title="线的虚实：stroke-dasharray"></a>线的虚实：<code>stroke-dasharray</code></h4><p>（敲黑板）王牌属性出现辣！<br>这个属性的属性值是1到 n 个数字，多个数字由逗号隔开，CSS 中的定义则由空格分开，每个数字定义了实线段的长度，分别是按照绘制、不绘制这个顺序循环下去。</p>
<p>下面是设置了1个、2个、3个数字时虚线的描绘情况对比：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/stroke-dasharray.png" alt="stroke-dasharray"></p>
<h4 id="stroke-dashoffset"><a href="#stroke-dashoffset" class="headerlink" title="stroke-dashoffset"></a><code>stroke-dashoffset</code></h4><p>（敲黑板）这个也是重点属性！<br>当我们将描边虚实设置成实线部分与图形描边长度相同时，我们是看不到空白段的部分的。这时形状的描边就像完全描绘出来了一样。这时我们使用这个属性，将虚线开始的位置稍微做一下移动，无论是往前移还是往后移，我们都能看到图形描边出现了一段空白，当这个移动形成一个连续的动作时，描线动效就这么不经意的出现了（蓦然回首）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svg</span> <span class="selector-tag">line</span> &#123;</div><div class="line">  <span class="attribute">stroke-dasharray</span>: <span class="number">60</span>;</div><div class="line">	<span class="attribute">stroke-dashoffset</span>: <span class="number">60</span>;</div><div class="line">	<span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">5s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">line</span> &#123;</div><div class="line">	<span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/arrow_ani_1.gif" alt="arrow animation"></p>
<p>再对头部做个延时处理，修改一下虚线移动的方向，动效看起来会更顺眼一些。这个时候，SVG 可以分路径编辑的优势就体现出来了。对每个 <code>line</code> 添加一个类，我们就能对每条路径进行差异化处理（<a href="http://codepen.io/lyxuncle/pen/KNaJad" target="_blank" rel="external">Codepen</a>）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"360"</span> <span class="attr">height</span>=<span class="string">"52"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 89.4 12.4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">class</span>=<span class="string">"arrow-line"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"6.2"</span> <span class="attr">x2</span>=<span class="string">"59.6"</span> <span class="attr">y2</span>=<span class="string">"6.2"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">class</span>=<span class="string">"arrow-head"</span> <span class="attr">x1</span>=<span class="string">"54.7"</span> <span class="attr">y1</span>=<span class="string">"0.7"</span> <span class="attr">x2</span>=<span class="string">"60.5"</span> <span class="attr">y2</span>=<span class="string">"6.5"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">class</span>=<span class="string">"arrow-head"</span> <span class="attr">x1</span>=<span class="string">"54.7"</span> <span class="attr">y1</span>=<span class="string">"11.7"</span> <span class="attr">x2</span>=<span class="string">"60.5"</span> <span class="attr">y2</span>=<span class="string">"5.8"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svg</span> <span class="selector-tag">line</span> &#123;</div><div class="line">  <span class="attribute">fill</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">stroke</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">stroke-width</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.arrow-line</span> &#123;</div><div class="line">  <span class="attribute">stroke-dasharray</span>: <span class="number">60</span>;</div><div class="line">  <span class="attribute">stroke-dashoffset</span>: <span class="number">60</span>;</div><div class="line">  <span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">5s</span> .<span class="number">2s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.arrow-head</span> &#123;</div><div class="line">  <span class="attribute">stroke-dasharray</span>: <span class="number">9</span>;</div><div class="line">  <span class="attribute">stroke-dashoffset</span>: -<span class="number">9</span>;</div><div class="line">  <span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">2s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">line</span> &#123;</div><div class="line">  <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.arrow-line</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">5s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.arrow-head</span> &#123;</div><div class="line">  <span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">2s</span> .<span class="number">5s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/arrow_ani_2.gif" alt="arrow animation"></p>
<p>了解了这两个重点属性，动效剩下的重担，就落在了 dasharray 与 dashoffset 值的计算上了。这个步骤或许没有什么捷径，简单的直线、弧线之类的或许还能口算口算，其余的不规则图形也就只有多试这条傻路可走，如果你是图形高手就当我没说。</p>
<p>另外三个描边属性：<code>stroke-linecap</code>、<code>stroke-linejoin</code>、<code>stroke-miterlimit</code> 由于暂时用不上惨遭抛弃，具体可参考<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes" target="_blank" rel="external">MDN-SVG Tutorial-Fills and Strokes</a>，<code>stroke-miterlimit</code> 详解<a href="http://www.oxxostudio.tw/articles/201409/svg-16-storke-miterlimit.html" target="_blank" rel="external">SVG 研究之路（16）- Stroke-miterlimit</a>。</p>
<h3 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h3><p>箭头的绘制只用到了路径中最简单的直线路径 <code>line</code>，SVG 中还有矩形 <code>rect</code>、圆形 <code>circle</code>、椭圆 <code>ellipse</code>、折线 <code>polyline</code>、多边形 <code>polygon</code> 以及万能的路径 <code>path</code>。之所以将一些规整的图形单独出标签，是为了代码的可读性更强些，毕竟 SVG 的可读性已经没那么强了……</p>
<p>规整图形的属性较好理解（具体可参考<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="external">MDN-SVG Tutorial-Path</a>），这里深入讲解一下如何阅读路径 <code>path</code> 的代码。</p>
<h4 id="绝对坐标绘制指令"><a href="#绝对坐标绘制指令" class="headerlink" title="绝对坐标绘制指令"></a>绝对坐标绘制指令</h4><blockquote>
<p>这组指令的参数代表的是绝对坐标。假设当前画笔所在的位置为(x0,y0)，则下面的绝对坐标指令代表的含义如下所示：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/1479654445931.png" alt="Alt text"></p>
<p>移动画笔指令 <code>M</code>，画直线指令：<code>L</code>，<code>H</code>，<code>V</code>，闭合指令 <code>Z</code> 都比较简单；下面重点看看绘制曲线的几个指令。</p>
</blockquote>
<h5 id="绘制圆弧指令：A-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-x-y"><a href="#绘制圆弧指令：A-rx-ry-x-axis-rotation-large-arc-flag-sweep-flag-x-y" class="headerlink" title="绘制圆弧指令：A rx ry x-axis-rotation large-arc-flag sweep-flag x y"></a>绘制圆弧指令：<code>A</code> rx ry x-axis-rotation large-arc-flag sweep-flag x y</h5><blockquote>
<p>用圆弧连接2个点比较复杂，情况也很多，所以这个命令有7个参数，分别控制曲线的的各个属性。下面解释一下数值的含义：<br>rx,ry 是弧所在的椭圆的半长轴、半短轴长度，rx 为 x 轴上的轴长，ry 为 y 轴上的周长。<br>x-axis-rotation 是此段弧的顺时针旋转角度，负数代表逆时针转动的角度。<br>large-arc-flag 两个值：<code>1</code>或<code>0</code>。<code>1</code>表示大角度弧线，<code>0</code>代表小角度弧线。<br>sweep-flag 两个值：<code>1</code>或<code>0</code>。<code>1</code>代表从起点到终点弧线绕中心顺时针方向，<code>0</code>代表逆时针方向。<br>x,y 是弧终端坐标。</p>
</blockquote>
<p>为了更好的理解圆弧的绘制，我们来试试手动画一下 <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#Arcs" target="_blank" rel="external">MDN 上的范例</a>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"320px"</span> <span class="attr">height</span>=<span class="string">"320px"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 320 320"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 315</span></span></div><div class="line">           L 110 215</div><div class="line">           A 30 50 0 0 1 162.55 162.45</div><div class="line">           L 172.55 152.45</div><div class="line">           A 30 50 -45 0 1 215.1 109.9</div><div class="line">           L 315 10" <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"green"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill-opacity</span>=<span class="string">"0.5"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/SVGArcs_XAxisRotation_with_grid.png" alt="SVG Arcs XAxisRotation with grid"></p>
<p>首先是 <code>M</code> 和 <code>L</code> 指令：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-first-step.png" alt="path d first step"></p>
<p>然后是 <code>A</code> 指令的绘制，在这一步可以看到 large-arc-flag（大小弧）与 sweep-flag（弧度方向）值的影响。</p>
<p>在本例中，弧度标记值为<code>0</code>，意味着选择小弧；弧度方向标记值为<code>1</code>，意味着选择起点到终点为顺时针方向的那条弧（别眨眼）：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-step-3.gif" alt="path d arcs"></p>
<p>接下来我们省略掉 <code>L</code> 指令的绘制，来看看下一个圆弧。这个圆弧的旋转角度（x-axis-rotation）发生了变化，体会一下差异：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-last-step.png" alt="path d last step"></p>
<p>看了这么久，是不是挺纳闷这么难看的东西为什么一定要读懂？其实也不是强求各位看官能成为脑补 SVG 图形的天才，只是大概读懂这些难看的数字，在做动画的时候才会心里有底手上有劲点，至少大概知道这条东西画出来是什么样，而后再针对它写写动效。所以，我们继续看看图形界的万金油——<a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="external">贝塞尔曲线</a>吧～！</p>
<blockquote>
<p>……贝塞尔曲线被广泛地在计算机图形中用来为平滑曲线建立模型。贝塞尔曲线是矢量图形文件和相应软件（如 PostScript、PDF 等）能够处理的唯一曲线，用于光滑地近似其他曲线。二次和三次贝塞尔曲线最为常用。<br>引用来源：<a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A#.E6.87.89.E7.94.A8" target="_blank" rel="external">维基百科——贝塞尔曲线——应用</a></p>
</blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A#.E5.BB.BA.E6.A7.8B.E8.B2.9D.E8.8C.B2.E6.9B.B2.E7.B7.9A" target="_blank" rel="external">维基上</a>有详细的贝塞尔曲线绘制公式与动图展示，这里就不做展开。</p>
<p><code>path</code> 中的贝塞尔曲线指令共有四个：<code>C</code>，<code>S</code>，<code>Q</code>，<code>T</code>。SVG 只提供了最高阶到三次的贝塞尔曲线绘制指令，事实上大部分绘图软件也是如此。</p>
<h5 id="三次贝塞尔曲线：C-x1-y1-x2-y2-x-y-（或者-c-dx1-dy1-dx2-dy2-dx-dy）"><a href="#三次贝塞尔曲线：C-x1-y1-x2-y2-x-y-（或者-c-dx1-dy1-dx2-dy2-dx-dy）" class="headerlink" title="三次贝塞尔曲线：C x1 y1, x2 y2, x y （或者 c dx1, dy1, dx2, dy2, dx dy）"></a>三次贝塞尔曲线：<code>C</code> x1 y1, x2 y2, x y （或者 <code>c</code> dx1, dy1, dx2, dy2, dx dy）</h5><blockquote>
<p>三次贝塞尔曲线有两个控制点，就是(x1,y1)和(x2,y2)，最后面(x,y)代表曲线的终点。</p>
</blockquote>
<p>这个时候还是上动图比较省心。以下面的代码段为例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 60 30"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 10 C 20 20, 40 20, 50 10"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>绘制过程如下：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-bezier.gif" alt="path d bezier"></p>
<p>（手残，顺滑绘制过程请还是参考<a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A#.E5.BB.BA.E6.A7.8B.E8.B2.9D.E8.8C.B2.E6.9B.B2.E7.B7.9A" target="_blank" rel="external">维基君</a>。）</p>
<p>借助 PS 中的钢笔工具根据辅助线能迅速画出路径，可以免去那抽象的计算过程。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-bezier-ps.gif" alt="draw bezier curve with ps"></p>
<h5 id="简化版三次贝塞尔曲线：S-x2-y2-x-y-（或者-s-dx2-dy2-dx-dy）"><a href="#简化版三次贝塞尔曲线：S-x2-y2-x-y-（或者-s-dx2-dy2-dx-dy）" class="headerlink" title="简化版三次贝塞尔曲线：S x2 y2, x y （或者 s dx2 dy2, dx dy）"></a>简化版三次贝塞尔曲线：<code>S</code> x2 y2, x y （或者 <code>s</code> dx2 dy2, dx dy）</h5><p>很多时候，曲线不止一个弧，为了平滑过渡，第二个曲线的控制点常常是第一个曲线控制点在曲线另外一边的映射点。这个时候可以使用这个简化版本。</p>
<blockquote>
<p>这里要注意的是，如果 <code>S</code> 指令前面没有其他的 <code>S</code> 指令或 <code>C</code> 指令，这个时候会认为两个控制点是一样的，退化成二次贝塞尔曲线的样子；如果 <code>S</code> 指令是用在另外一个 <code>S</code> 指令或者 <code>C</code> 指令后面，这个时候后面这个 <code>S</code> 指令的第一个控制点会默认设置为前面的这个曲线的第二个控制点的一个映射点。——<a href="http://www.cnblogs.com/dxy1982/archive/2012/04/06/2395729.html" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门2 - 图形绘制》</a></p>
</blockquote>
<p>这里重点讲解一下 <code>S</code> 指令中每个点对应的位置。同样借用 MDN 上的示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"190"</span> <span class="attr">height</span>=<span class="string">"160"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-bezier-s.gif" alt="S command"></p>
<h5 id="二次贝塞尔曲线：Q-x1-y1-x-y-（或者-q-dx1-dy1-dx-dy）"><a href="#二次贝塞尔曲线：Q-x1-y1-x-y-（或者-q-dx1-dy1-dx-dy）" class="headerlink" title="二次贝塞尔曲线：Q x1 y1, x y （或者 q dx1 dy1, dx dy）"></a>二次贝塞尔曲线：<code>Q</code> x1 y1, x y （或者 <code>q</code> dx1 dy1, dx dy）</h5><p>经历了三次贝塞尔曲线的洗礼，二次贝塞尔曲线看起来真是亲切。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"190"</span> <span class="attr">height</span>=<span class="string">"160"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 80 Q 95 10, 180 80"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/path-d-bezier-q.gif" alt="Q command"></p>
<p>注：PS 中的钢笔工具绘制二次贝塞尔曲线只能通过三次贝塞尔曲线进行模拟，或许二次贝塞尔曲线最准确的绘制方法就是通过代码了吧。这里有一个可视化 Canvas 绘制贝塞尔曲线的网站——<a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/quadratic-curve.html" target="_blank" rel="external">Canvas Quadratic Curve Example</a>，实现方式比 SVG 还复杂[抠鼻]。</p>
<h5 id="简化版二次贝塞尔曲线：T-x-y（或者-t-dx-dy）"><a href="#简化版二次贝塞尔曲线：T-x-y（或者-t-dx-dy）" class="headerlink" title="简化版二次贝塞尔曲线：T x y（或者 t dx dy）"></a>简化版二次贝塞尔曲线：<code>T</code> x y（或者 <code>t</code> dx dy）</h5><p>与 <code>S</code> 指令类似，为了更顺滑的多弧曲线，<code>T</code> 指令直接指定曲线终点，控制点自动计算。</p>
<p>同时，如果 <code>T</code> 指令只在上一个指令为 <code>Q</code> 或者 <code>T</code> 指令的情况下有效，否则当作 <code>L</code> 指令执行。</p>
<p>终于把贝塞尔讲完了……</p>
<h2 id="第二个神奇的动效"><a href="#第二个神奇的动效" class="headerlink" title="第二个神奇的动效"></a>第二个神奇的动效</h2><p>偷偷用一个箭头把 SVG 的填色、描边、路径都给讲完了，然而，SVG 能用到的还不止这些。开玩笑，Web 界的猪——浑身都是宝——可不是吹的。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/play_btn_hover-svg.gif" alt="play button hover animation"></p>
<p>首先，我们观察一下这个播放键的结构的实现方法（<a href="http://codepen.io/lyxuncle/pen/rWmdMG" target="_blank" rel="external">Codepen</a>）（注：为了能直观地看到效果，我将 .play-icon-blend 的填充与描边改为了黑色，<a href="http://codepen.io/lyxuncle/pen/qqbopp" target="_blank" rel="external">原例子</a>中为白色）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"play-icon-vector"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 50 50"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"play-circle-template"</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"25"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">class</span>=<span class="string">"play-icon-blend"</span> <span class="attr">xlink:href</span>=<span class="string">"#play-circle-template"</span> <span class="attr">fill</span>=<span class="string">"#000"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span> <span class="attr">stroke-width</span>=<span class="string">"4px"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">class</span>=<span class="string">"play-icon-circle"</span> <span class="attr">xlink:href</span>=<span class="string">"#play-circle-template"</span> <span class="attr">fill</span>=<span class="string">"#fff"</span> <span class="attr">stroke</span>=<span class="string">"#fff"</span> <span class="attr">stroke-width</span>=<span class="string">"2px"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"play-icon-polygon"</span> <span class="attr">d</span>=<span class="string">"M31.49,24.31a0.73,0.73,0,0,1,0,1.38l-8.27,5.64A0.74,0.74,0,0,1,22,30.64V19.36a0.74,0.74,0,0,1,1.22-.69Z"</span> <span class="attr">fill</span>=<span class="string">"#fff"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.play-icon-vector</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: visible;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.play-icon-circle</span> ,</div><div class="line"><span class="selector-class">.play-icon-polygon</span> &#123;</div><div class="line">  <span class="attribute">mix-blend-mode</span>: exclusion;</div><div class="line">  <span class="attribute">transition</span>: opacity .<span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.08,.03,.22,.87);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.play-icon-blend</span> &#123;</div><div class="line">  <span class="attribute">transform-origin</span>: center;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0);</div><div class="line">  <span class="attribute">transition</span>: transform .<span class="number">25s</span> <span class="built_in">cubic-bezier</span>(.08,.03,.22,.87);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.play-icon-vector</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.play-icon-blend</span> &#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里顺带用了一下下 <a href="https://css-tricks.com/almanac/properties/m/mix-blend-mode/" target="_blank" rel="external">CSS3 的滤镜</a> <code>mix-blend-mode</code>（SVG 也有滤镜功能，这里不做介绍，感兴趣的可以移步<a href="http://www.cnblogs.com/dxy1982/archive/2012/06/13/2530529.html" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门10 - 滤镜》</a>）。这里用到的值 <code>exclusion</code> 的效果，是在叠加区域只显示亮色，下面是使用了同样滤镜的图片与正常图片的对比图，感受一下：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/exclusion.jpg" alt="exclusion"></p>
<p>图片来源：<a href="https://css-tricks.com/almanac/properties/m/mix-blend-mode/" target="_blank" rel="external">CSS-Tricks-mix-blend-mode</a></p>
<p>可以看到代码里还出现了一些了不得的标签—— <code>&lt;defs&gt;</code>、<code>&lt;use&gt;</code>。接下来，我们就来了解一下它们。</p>
<p>首先我们知道，通过中间圆圈的缩放，再加上外围圆圈与中心三角的叠加效果，完成了这个 hover 效果。也就意味着，圆圈在这里用到两次。这个时候就可以使用 SVG 里路径的重用与引用功能。</p>
<h3 id="SVG-的重用与引用"><a href="#SVG-的重用与引用" class="headerlink" title="SVG 的重用与引用"></a>SVG 的重用与引用</h3><p>三种集合标签：<code>&lt;g&gt;</code>、<code>&lt;symbol&gt;</code>、<code>&lt;defs&gt;</code>，都是用于将零散的图形组合成一个整体。区别在于：</p>
<ul>
<li><code>&lt;g&gt;</code>：组合标签。添加 <code>id</code> 属性来作为引用的钩子，可在 <code>&lt;g&gt;</code> 标签上设置这组元素的相关属性（填色、描边等等）。</li>
<li><code>&lt;symbol&gt;</code>：模板标签。与 <code>&lt;g&gt;</code> 标签一样，通过 <code>id</code> 进行引用。不同点在于，<code>symbol</code> 元素本身不会被渲染；<code>symbol</code> 元素拥有属性 <code>viewBox</code> 和 <code>preserveAspectRatio</code>，这些允许 <code>symbol</code> 缩放图形。</li>
<li><code>&lt;defs&gt;</code>：定义标签。不仅仅是图形对象的合集，还可以是渐变效果、蒙版、滤镜等等，设置好 <code>id</code>，在对应的属性（例如渐变就是 <code>fill</code>、蒙版就是 <code>mask</code>、滤镜就是 <code>filter</code>）中引用即可，引用格式为“<code>url(#id)</code>”。具体例子参看<a href="http://www.oxxostudio.tw/articles/201409/svg-18-defs.html" target="_blank" rel="external">《SVG 研究之路 (18) - 再談 defs》</a>。</li>
</ul>
<p>更详细的区别见<a href="http://www.cnblogs.com/dxy1982/archive/2012/05/17/2503782.html" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门7 - 重用与引用》</a>。</p>
<p>以上三种集合的引用统一使用 <code>&lt;use&gt;</code> 标签。<code>xlink:href</code> 属性指定引用的 <code>id</code>。</p>
<blockquote>
<p><code>use</code> 元素的作用过程就相当于把被引用的对象深拷贝一份到独立的非公开的 DOM 树中；这棵树的父节点是 <code>use</code> 元素。虽然是非公开的DOM节点，但是本质上还是 DOM 节点，所以被引用对象的所有属性值、动画、事件、 CSS 的相关设置等都会拷贝多来并都还是会起作用，而且这些节点也会继承 <code>use</code> 元素和 <code>use</code> 祖先的相关属性（注意引用元素是深拷贝，这些拷贝过来的元素与原来的元素已经无关系了，所以这里不会继承被引用元素祖先节点的属性），如果这些节点本身有相关（CSS）属性，还会覆盖继承来的属性，这些与普通的DOM节点是一致的，所以对use元素使用“<code>visibility:hidden</code>”时要小心，并不一定会起作用。但是由于这部分节点是非公开的，在 DOM 操作中，也只能看到 <code>use</code> 元素，所以也只能操作到 <code>use</code> 元素。</p>
</blockquote>
<p>在 SVG Sprite 中，<code>&lt;use&gt;</code> 的使用比较猖狂（<a href="https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/">《拥抱 Web 设计新趋势：SVG Sprites 实践应用》</a>，同时也提到了 SVG 的兼容情况），而当 SVG 图形代码与引用部分分离开时，想针对图形中的某一部分进行处理就会显得特别麻烦（只能看到 <code>use</code> 结点），这个时候，打开 shadow DOM 的显示，包你一览无余（具体操作方法见<a href="https://aotu.io/notes/2016/06/24/Shadow-DOM/">《神奇的 Shadow DOM》</a>）。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/shadow-root.png" alt="svg shadow root"></p>
<p>打开了 shadow DOM 显示的 <code>use</code> 标签</p>
<p>下面就来看一个非图形引用的例子。在前面我们知道了，如果要描边动效，那修改 <code>stroke-dashoffset</code> 就可以达到效果。然而这种方法本身就是利用了虚线的 hack，如果我们想要做一个虚线的描线动效呢？比如：</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/grid_icon_hover.gif" alt="grid icon hover"></p>
<p>这个时候 <code>stroke-dasharray</code> 与 <code>stroke-offset</code> 的合作是无法完成的，因为他俩动起来本身就是虚线在移动。所以我们需要换个思路，描线动画还是那个描线动画，只是虚线的绘制需要使用另一个 hack —— 蒙版。</p>
<h3 id="蒙版"><a href="#蒙版" class="headerlink" title="蒙版"></a>蒙版</h3><p>SVG 中的蒙版有两种——剪裁cliping <code>&lt;clipPath&gt;</code> 与遮罩mask <code>&lt;mask&gt;</code>，都需要在 <code>&lt;defs&gt;</code> 中定义，然后通过对应的属性进行引用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 剪裁的定义 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">"cliping"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 遮罩的定义 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">"mask"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">mask</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 剪裁的引用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">clip-path</span>=<span class="string">"url(#cliping)"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 遮罩的引用 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">clip-path</span>=<span class="string">"url(#mask)"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注：以上代码为了直观体现两者的使用方法，已剔除其余不相干代码，不可直接运行。</p>
<p>剪裁与遮罩的区别在于，剪裁是按照定义的形状界限分明地进行图像的展示与隐藏：</p>
<p>而遮罩相较于剪裁，多了渐变显示图像的功能，只要在 <code>&lt;mask&gt;</code> 中包裹渐变的定义即可。遮罩的展示策略是：</p>
<blockquote>
<p>越黑越透明，越白越不透明，而遮色片（注：即遮罩）只有黑到白的灰階分布，所以如果作為遮色片的顏色是灰階以外的顏色，都會被轉換為灰階。——引用来源<a href="http://www.oxxostudio.tw/articles/201406/svg-09-clipping-masking.html" target="_blank" rel="external">《SVG 研究之路 (9) - Clipping and Masking》</a></p>
</blockquote>
<p>因此遮罩的功能其实是包含剪裁的，当遮罩使用的是纯黑的图像时，功能等同于剪裁。</p>
<p><img src="https://misc.aotu.io/lyxuncle/20161125_SVG_Web_Animation/cliping_mask_2.jpg" alt="cliping and mask"></p>
<p>虚线的描线动效结合剪裁或者遮罩即可以完成（<a href="http://codepen.io/lyxuncle/pen/PbmdxO" target="_blank" rel="external">Codepen</a>）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 300 100"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">"dash"</span> <span class="attr">class</span>=<span class="string">"dash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"40"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"80"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">"mask-dash"</span> <span class="attr">class</span>=<span class="string">"mask_dash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"40"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"80"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"34"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">clip-path</span>=<span class="string">"url(#dash)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">class</span>=<span class="string">"line"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"28"</span> <span class="attr">x2</span>=<span class="string">"100"</span> <span class="attr">y2</span>=<span class="string">"28"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">mask</span>=<span class="string">"url(#mask-dash)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"36"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"8"</span> <span class="attr">fill</span>=<span class="string">"#eee"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">line</span> <span class="attr">class</span>=<span class="string">"line"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"40"</span> <span class="attr">x2</span>=<span class="string">"100"</span> <span class="attr">y2</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mask_dash</span> <span class="selector-tag">rect</span>&#123;</div><div class="line">  <span class="attribute">fill</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.line</span> &#123;</div><div class="line">  <span class="attribute">stroke</span>: <span class="number">#000</span>;</div><div class="line">  <span class="attribute">stroke-width</span>: <span class="number">8px</span>;</div><div class="line">  <span class="attribute">stroke-dasharray</span>: <span class="number">100</span>;</div><div class="line">  <span class="attribute">stroke-dashoffset</span>: <span class="number">100</span>;</div><div class="line">  <span class="attribute">transition</span>: stroke-dashoffset ease-in .<span class="number">5s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.line</span> &#123;</div><div class="line">  <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意到上方使用了遮罩的集合里多了一个方形图像，是因为遮罩对于图形尺寸的要求更加严苛，<code>line</code> 在它的眼里不是东西，不提供任何效果支持，但是一旦加个方形垫背，<code>line</code> 就被接受了[翻白眼]。所以涉及到切割的蒙版，请尽量使用 <code>clipPath</code>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写到这里，阿婆主气数已尽，SVG 是个深坑，这里也只能借着三个例子扯扯若干特性，等下回心情好了，阿婆主再拎几个出来说说（也是任性，人的 SVG 笔记都是一个属性一篇的）。下面我们来给这篇凌乱的文章做个梳理：</p>
<ul>
<li>今天我们实现了三个动效——<ul>
<li><a href="http://codepen.io/lyxuncle/pen/wozzrV" target="_blank" rel="external"><strong>箭头</strong>描线动效</a></li>
<li><a href="http://codepen.io/lyxuncle/pen/qqbopp" target="_blank" rel="external"><strong>播放按钮</strong>滤镜动效</a></li>
<li><a href="http://codepen.io/lyxuncle/pen/bBejZZ" target="_blank" rel="external"><strong>虚线</strong>描线动效</a></li>
</ul>
</li>
<li>动效来源于 <a href="http://www.welikesmall.com/work/adobe/" target="_blank" rel="external">WLS-Adobe</a></li>
<li>聊到了 SVG 的几个标签<ul>
<li><code>&lt;path&gt;</code></li>
<li><code>&lt;g&gt;</code></li>
<li><code>&lt;symbol&gt;</code></li>
<li><code>&lt;defs&gt;</code></li>
<li><code>&lt;use&gt;</code></li>
<li><code>&lt;clipPath&gt;</code></li>
<li><code>&lt;mask&gt;</code></li>
</ul>
</li>
<li>以及属性<ul>
<li><code>viewBox</code></li>
<li><code>preserveAspectRatio</code></li>
<li><code>fill</code></li>
<li><code>stroke</code></li>
<li><code>stroke-dasharray</code></li>
<li><code>stroke-dashoffset</code></li>
<li><code>d</code></li>
<li><code>clip-path</code></li>
<li><code>mask</code></li>
</ul>
</li>
<li>动效实现对应的关键点<ul>
<li><strong>箭头</strong>——<code>stroke-dasharray</code>、<code>stroke-dashoffset</code></li>
<li><strong>播放按钮</strong>——<code>&lt;defs&gt;</code>、<code>&lt;use&gt;</code></li>
<li><strong>虚线</strong>——<code>&lt;clipPath&gt;</code>、<code>&lt;mask&gt;</code>、<code>clip-path</code>、<code>mask</code>、<code>stroke-dasharray</code>、<code>stroke-dashoffset</code></li>
</ul>
</li>
</ul>
<p>文中引用到的资料（前方高能预警）：</p>
<ul>
<li><a href="http://www.cnblogs.com/dxy1982/tag/svg/" target="_blank" rel="external">《突袭 HTML5 之 SVG 2D 入门》</a>，沙场秋点兵<ul>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/04/06/2395729.html" target="_blank" rel="external">2.图形绘制</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/04/14/2395734.html" target="_blank" rel="external">4.笔画与填充</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/05/07/2395732.html" target="_blank" rel="external">6.坐标与变换</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/05/17/2503782.html" target="_blank" rel="external">7.重用与引用</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/06/01/2395742.html" target="_blank" rel="external">9.蒙板</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/06/13/2530529.html" target="_blank" rel="external">10.滤镜</a></li>
</ul>
</li>
<li>《SVG 研究之路》，<a href="http://www.oxxostudio.tw/" target="_blank" rel="external">Oxxo Studio</a><ul>
<li><a href="http://www.oxxostudio.tw/articles/201406/svg-09-clipping-masking.html" target="_blank" rel="external">9.Clipping and Masking</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201409/svg-16-storke-miterlimit.html" target="_blank" rel="external">16.Stroke-miterlimit</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201409/svg-18-defs.html" target="_blank" rel="external">18.再談 defs</a></li>
<li><a href="http://www.oxxostudio.tw/articles/201409/svg-23-viewpoint-viewBox.html" target="_blank" rel="external">23.理解 viewport 與 viewbox</a></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial" target="_blank" rel="external">SVG Tutorial</a>，<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">MDN</a><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Positions" target="_blank" rel="external">Positions</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes" target="_blank" rel="external">Fills and Strokes</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths" target="_blank" rel="external">Path</a></li>
</ul>
</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E8%8C%B2%E6%9B%B2%E7%B7%9A" target="_blank" rel="external">贝塞尔曲线</a>，维基百科</li>
<li><a href="https://css-tricks.com/almanac/properties/m/mix-blend-mode/" target="_blank" rel="external">mix-blend-mode</a>，<a href="https://css-tricks.com/author/robinrendle/" target="_blank" rel="external">Robin Rendle</a>，<a href="https://css-tricks.com/" target="_blank" rel="external">CSS-Tricks</a></li>
<li><a href="https://aotu.io/notes/2016/07/09/SVG-Symbol-component-practice/">《拥抱 Web 设计新趋势：SVG Sprites 实践应用》</a>，高大师，<a href="https://aotu.io/">凹凸实验室</a></li>
<li><a href="https://aotu.io/notes/2016/06/24/Shadow-DOM/">《神奇的 Shadow DOM》</a>，暖暖，<a href="https://aotu.io/">凹凸实验室</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3 动效玩腻了吗？没关系的，我们还有 SVG。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SVG" scheme="https://aotu.io/tags/SVG/"/>
    
      <category term="动效" scheme="https://aotu.io/tags/%E5%8A%A8%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>「塔罗牌」 - 轻氧 V1.4 尝鲜体验邀请</title>
    <link href="https://aotu.io/notes/2016/11/21/liteo2-app-tarots/"/>
    <id>https://aotu.io/notes/2016/11/21/liteo2-app-tarots/</id>
    <published>2016-11-21T05:21:43.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天要介绍的是<a href="//app.aotu.io">轻氧1.4版本</a>，Code Name「塔罗牌」，这是一个玩儿的版本。</p>
<p>如果你还不知道轻氧是什么鬼，那末可以先移步这里：<a href="https://aotu.io/notes/2016/11/09/liteo2-app/">轻氧 - 2016年末最新款互联网专业资讯 APP</a>，或者直接关注「凹凸实验室」的公众号以获取更多轻氧APP的最新讯息。</p>
<p>在轻氧上一个版本（响尾蛇）推出的时候，我们在实验室的公众号做了一次小范围的推广，总用户数虽然谈不上惊喜，但也超出了一开始的期望，且每日俱增。</p>
<p>朋友们所给的评论和意见，不管褒贬我们都有记录，而其中呼声最高的安卓版本，我们已优先列入开发计划，技术选型上我们决定尝试使用阿里的<a href="https://github.com/alibaba/weex" target="_blank" rel="external">weex</a>，支持国货，人人有责。</p>
<h2 id="塔罗牌（Tarots"><a href="#塔罗牌（Tarots" class="headerlink" title="塔罗牌（Tarots)"></a>塔罗牌（Tarots)</h2><p>「看看资讯，玩玩牌」，我们其实就是想给「轻氧」加一个神秘好玩的功能，类似远古时代的「占卜」，通过用户主动给予它的一些交互引出一些未知的功能，这个版本叫「塔罗牌」，打开APP，相信你们就知道怎么玩。</p>
<h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><p>实在不会玩的童鞋可以看下玩法流程：</p>
<p><img src="//misc.aotu.io/o2/img/app/v1-4-flow.png" alt="玩法"></p>
<p>APP将玩法最终呈现给用户的是一张张卡片UI，所以我们把每次推送给用户的活动称为「卡牌」。每个卡牌具有不一样的玩法功能和营销意义。</p>
<p>卡牌的出现可以增加一些有趣的逻辑，例如带频道限制的卡牌 - 适用于在不同频道摇出不同的卡片；带时间段限制的卡片 - 可以在不同的时间段、节日摇出不一样的卡片。。。</p>
<p>而至于卡牌内容的设计，嘿嘿，我们可以很乖巧，也可以很邪恶，可以很文艺清新，也可以风骚YD，可以很地方随意，也可以很官方严肃，总之我们努力满足各方要求，不管你是宅男还是欲女！</p>
<p>在1.4.0版本中，我们只准备了有限的3张卡牌，大伙儿先提前尝尝鲜吧。</p>
<p>成熟性感与完美，需要多给我们一点调教的时间。</p>
<h2 id="尝鲜下载体验"><a href="#尝鲜下载体验" class="headerlink" title="尝鲜下载体验"></a>尝鲜下载体验</h2><blockquote>
<p>目前仅提供ios版本<br>基于 Weex 的 Android 版与网页版正在紧急开发中，敬请期待。</p>
</blockquote>
<p>官网地址：<br><a href="https://app.aotu.io" target="_blank">https://app.aotu.io</a></p>
<p>下载地址：<br><a href="https://jdc.jd.com/lab/redirect_app.html?ADTAG=o2.site.app" title="下载试用" class="btn btn-greyline btn-mobile-full" target="_blank" rel="external"><img src="http://storage.360buyimg.com/mtd/home/appstorelogo1478670585078.jpg" alt="下载试用「轻氧」" width="250px"></a></p>
<p>扫二维码：</p>
<p><a href="https://jdc.jd.com/lab/redirect_app.html?ADTAG=o2.site.app" title="轻氧二维码" class="btn btn-greyline btn-mobile-full" target="_blank" rel="external"><img src="https://misc.aotu.io/o2/img/app/qrcode.png" alt="轻氧二维码" width="250px"></a></p>
<p>问题反馈：</p>
<ul>
<li>「凹凸实验室」公众号 (AOTULabs)</li>
<li>APP 个人中心 -&gt; 设置 -&gt; 意见反馈 </li>
</ul>
<p>希望在这个信息爆炸的时代，「轻氧」能够帮助你<strong>聚焦更优质的资讯内容</strong>。<br>也让你更加专注于用心被创造出来的文章，和其创造者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要介绍的是&lt;a href=&quot;//app.aotu.io&quot;&gt;轻氧1.4版本&lt;/a&gt;，Code Name「塔罗牌」，这是一个玩儿的版本。&lt;/p&gt;
&lt;p&gt;如果你还不知道轻氧是什么鬼，那末可以先移步这里：&lt;a href=&quot;https://aotu.io/notes/2016/1
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liteo2" scheme="https://aotu.io/tags/liteo2/"/>
    
      <category term="app" scheme="https://aotu.io/tags/app/"/>
    
      <category term="ios" scheme="https://aotu.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式理论篇</title>
    <link href="https://aotu.io/notes/2016/11/17/regexp-theory/"/>
    <id>https://aotu.io/notes/2016/11/17/regexp-theory/</id>
    <published>2016-11-17T01:29:38.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习正则表达式的你们，有没有发现，一开始总是记不住语法。嗯，加深大家的印象的同时，我也是来找同道中人的。</p>
<a id="more"></a>
<h2 id="首先你要记住它的名字"><a href="#首先你要记住它的名字" class="headerlink" title="首先你要记住它的名字"></a>首先你要记住它的名字</h2><p>正则表达式<br>regular expression<br>缩写 regexp  、regex 、egrep。</p>
<h2 id="正则表达式可以干嘛"><a href="#正则表达式可以干嘛" class="headerlink" title="正则表达式可以干嘛"></a>正则表达式可以干嘛</h2><ul>
<li>数据验证。</li>
<li>复杂的字符串搜寻、替换。</li>
<li>基于模式匹配从字符串中提取子字符串。</li>
</ul>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>正则表达式包括<strong>普通字符</strong>（例如，a 到 z 之间的字母）和<strong>特殊字符</strong>（称为“元字符”）。</p>
<p>若要匹配这些特殊字符，必须首先<strong>转义字符</strong>，即，在字符前面加反斜杠字符 <code>\</code>**。<br>例如，若要搜索 “+”文本字符，可使用表达式 <code>\+</code>。<br>但是大多数 特殊字符 在中括号表达式内出现时失去本来的意义，并恢复为普通字符。</p>
<h2 id="构造函数（四种写法）"><a href="#构造函数（四种写法）" class="headerlink" title="构造函数（四种写法）"></a>构造函数（四种写法）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);  </div><div class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>); </div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>; </div><div class="line"></div><div class="line"><span class="comment">// ES6的写法。ES5在第一个参数是正则时，不允许此时使用第二个参数，会报错。 </span></div><div class="line"><span class="comment">// 返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</span></div><div class="line"><span class="comment">// 下面代码返回”i”。</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags</div></pre></td></tr></table></figure>
<h2 id="用于模式匹配的String方法"><a href="#用于模式匹配的String方法" class="headerlink" title="用于模式匹配的String方法"></a>用于模式匹配的String方法</h2><ul>
<li>String.search()<br>参数：要搜索的子字符串，或者一个正则表达式。<br>返回：<strong>第一个与参数匹配的子串的起始位置，如果找不到，返回-1</strong>。<br>说明：不支持全局搜索，如果参数是字符串，会先通过RegExp构造函数转换成正则表达式。</li>
</ul>
<ul>
<li>String.replace()<br>作用：查找并替换字符串。<br>第一个参数：字符串或正则表达式，<br>第二个参数：要进行替换的字符串，也可以是函数。<br>用法：</li>
</ul>
<p>替换文本中的$字符有特殊含义：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$1</span>、<span class="variable">$2</span>、...、<span class="variable">$99</span> 与 regexp 中的第 <span class="number">1</span> 到第 <span class="number">99</span> 个子表达式相匹配的文本。</div><div class="line"><span class="variable">$&amp;</span>	与 regexp 相匹配的子串。</div><div class="line"><span class="variable">$`</span>	位于匹配子串左侧的文本。</div><div class="line"><span class="variable">$'</span>	位于匹配子串右侧的文本。</div><div class="line"><span class="variable">$$</span>	普通字符<span class="variable">$。</span></div></pre></td></tr></table></figure></p>
<p>如：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.replace(<span class="regexp">/b/g</span>, <span class="string">"&#123;$$$`$&amp;$'&#125;"</span>)</div><div class="line"><span class="regexp">//</span> 结果为 <span class="string">"a&#123;$abc&#125;c"</span>，即把b换成了&#123;<span class="variable">$abc</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>String.match()<br>参数：要搜索的子字符串，或者一个正则表达式。<br>返回：<strong>一个由匹配结果组成的数组</strong>。</li>
</ul>
<p><strong>非全局检索</strong>：如果没有找到任何匹配的文本返回null；否则数组的第一个元素是匹配的字符串，剩下的是小括号中的子表达式，即a[n]中存放的是$n的内容。非全局检索返回三个属性：length 属性；index 属性声明的是匹配文本的第一个字符的位置；input 属性则存放的是被检索的字符串 string。</p>
<p><strong>全局检索</strong>：设置标志g则返回所有匹配子字符串，即不提供与子表达式相关的信息。没有 index 属性或 input 属性。</p>
<p><img src="//misc.aotu.io/Newcandy/2016-11-16-regexp-theory/match.png" alt="match"></p>
<ul>
<li>String.split()<br>作用：把一个字符串分割成字符串数组。<br>参数：正则表达式或字符串。<br>返回：子串组成的数组。</li>
</ul>
<h2 id="RegExp的方法"><a href="#RegExp的方法" class="headerlink" title="RegExp的方法"></a>RegExp的方法</h2><ul>
<li>RegExpObject.exec()<br>参数：字符串。<br>返回：</li>
</ul>
<p><strong>非全局检索</strong>：与String.macth()非全局检索相同，返回一个数组或null。</p>
<p><strong>全局检索</strong>：尽管是全局匹配的正则表达式，但是exec方法只对指定的字符串进行一次匹配。但是可以反复调用来实现全局检索。在 RegExpObject 的lastIndex 属性指定的字符处开始检索字符串；匹配后，将更新lastIndex为匹配文本的最后一个字符的下一个位置；再也找不到匹配的文本时，将返回null，并把 lastIndex 属性重置为 0。</p>
<p>如：</p>
<p><img src="//misc.aotu.io/Newcandy/2016-11-16-regexp-theory/exec_g.png" alt="exec全局检索"></p>
<ul>
<li><p>RegExpObject.test()<br>参数：字符串。<br>返回：true或false。</p>
</li>
<li><p>RegExpObject.toString()<br>返回：字符串</p>
</li>
</ul>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p><code>|</code> 指示在两个或多个项之间进行选择。类似js中的或，又称<strong>分支条件</strong>。<br><code>/</code> 正则表达式模式的开始或结尾。<br><code>\</code> 反斜杠字符，用来转义。<br><code>-</code> 连字符 <strong>当且仅当在字符组[]的内部表示一个范围</strong>，比如[A-Z]就是表示范围从A到Z；如果需要在字符组里面表示普通字符-，放在字符组的开头即可。</p>
<p><code>.</code> 匹配除换行符 \n 之外的任何单个字符。<br><code>\d</code>  等价[0-9]，匹配0到9字符。<br><code>\D</code> 等价[^0-9]，与<code>\d</code>相反。<br><code>\w</code> 与以下任意字符匹配：A-Z、a-z、0-9 和下划线，等价于 [A-Za-z0-9<em>]。<br><code>\W</code> 与\w相反，即 [^A-Za-z0-9</em>]</p>
<h2 id="限定符（量词字符）"><a href="#限定符（量词字符）" class="headerlink" title="限定符（量词字符）"></a>限定符（量词字符）</h2><p><strong>显示限定符</strong>位于大括号 {} 中，并包含指示出现次数上下限的数值；<code>*+?</code> 这三个字符属于<strong>单字符限定符</strong>：</p>
<p><code>{n}</code> 正好匹配 n 次。<br><code>{n,}</code> 至少匹配 n 次。<br><code>{n,m}</code> 匹配至少 n 次，至多 m 次。<br><code>*</code>  等价{0,}<br><code>+</code> 等价{1,}<br><code>?</code> 等价{0,1}</p>
<p>注意：</p>
<ul>
<li>显示限定符中，逗号和数字之间不能有空格，否则返回null！</li>
<li><strong>贪婪量词<code>*</code>和<code>+</code></strong>：javascript默认是贪婪匹配，也就是说匹配重复字符是尽可能多地匹配。</li>
<li><strong>惰性（最少重复匹配）量词<code>?</code></strong>：当进行非贪婪匹配，只需要在待匹配的字符后面跟随一个<code>?</code>即可。</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /a+/;</div><div class="line"><span class="keyword">var</span> reg2 = /a+?/;</div><div class="line"><span class="keyword">var</span> str = 'aaab';</div><div class="line"></div><div class="line">str.<span class="built_in">match</span>(<span class="keyword">reg</span>); <span class="comment">// ["aaa"]</span></div><div class="line">str.<span class="built_in">match</span>(reg2); <span class="comment">// ["a"]</span></div></pre></td></tr></table></figure>
<h2 id="定位点（锚字符、边界）"><a href="#定位点（锚字符、边界）" class="headerlink" title="定位点（锚字符、边界）"></a>定位点（锚字符、边界）</h2><p><code>^</code> 匹配开始的位置。将 <code>^</code> 用作括号<code>[]</code>表达式中的第一个字符，则会对字符集求反。<br><code>$</code> 匹配结尾的位置。<br><code>\b</code> 与一个字边界匹配，如er\b 与“never”中的“er”匹配，但与“verb”中的“er”不匹配。<br><code>\B</code> 非边界字匹配。</p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul>
<li><p>中括号<code>[]</code> 字符组；标记括号表达式的开始和结尾，起到的作用是匹配这个或者匹配那个。<br><code>[...]</code> 匹配方括号内<strong>任意字符</strong>。很多字符在<code>[]</code>都会失去本来的意义：<code>[^...]</code>匹配不在方括号内的任意字符；<code>[?.]</code>匹配普通的问号和点号。<br><strong>但是不要滥用字符组这个失去意义的特性，比如不要使用<code>[.]</code>来代替<code>\:</code>转义点号，因为需要付出处理字符组的代价</strong>。</p>
</li>
<li><p>大括号<code>{}</code> 标记限定符表达式的开始和结尾。</p>
</li>
<li><p>小括号<code>()</code> 标记子表达式的开始和结尾，主要作用是分组，对内容进行区分。</p>
</li>
</ul>
<p><code>(模式)</code> 可以记住和这个模式匹配的匹配项（捕获分组）。<strong>不要滥用括号，如果不需要保存子表达式，可使用非捕获型括号<code>(?:)</code>来进行性能优化</strong>。<br><code>(?:模式)</code>   与模式 匹配，但不保存匹配项(非捕获分组)。<br><code>(?=模式)</code>  零宽正向先行断言，要求匹配与模式 匹配的搜索字符串。 找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项；但不会保存匹配项。<br><code>(?!模式)</code>   零宽负向先行断言，要求匹配与模式 不匹配的搜索字符串。 找到一个匹配项后，将在匹配文本之前开始搜索下一个匹配项；但不会保存匹配项。</p>
<p>有点晕？<br>好，换个说法。。。</p>
<p>先行断言<code>(?=模式)</code>：x只有在y前面才匹配，必须写成<code>/x(?=y)/</code>。 解释：找一个x，那个x的后面有y。<br>先行否定断言<code>(?!模式)</code>： x只有不在y前面才匹配，必须写成<code>/x(?!y)/</code>。 解释：找一个x，那个x的后面没有y。</p>
<p>稳住，又来了两个断言，来自ES7提案：</p>
<p>后行断言<code>(?&lt;=模式)</code>：与”先行断言”相反， x只有在y后面才匹配，必须写成<code>/(?&lt;=y)x/</code>。解释：找一个x，那个x的前面要有y。<br>后行否定断言<code>(?&lt;!模式)</code>： 与”先行否定断言“相反，x只有不在y后面才匹配，必须写成<code>/(?&lt;!y)x/</code>。 解释：找一个x，那个x的前面没有y。</p>
<p>可以看出，后行断言先匹配/(?&lt;=y)x/的x，然后再回到左边，匹配y的部分，即先右后左”的执行顺序。 </p>
<p>零宽负向先行断言的例子：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var str=`<span class="javascript">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"o2"</span>&gt;</span></div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"o2_team"</span>&gt;</span></span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/logo.jpg"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`;</div><div class="line"><span class="regexp">//</span> &lt;(?!img) 表示找一个左尖括号&lt;，而且左尖括号&lt;的后面没有img字符；</div><div class="line"><span class="regexp">//</span> (?:.|\r|\n)*? 表示匹配左右尖括号&lt;&gt;里面的.或\r或\n，而且匹配次数为*?；(?:)不保存匹配项，提高性能；</div><div class="line"><span class="regexp">//</span> *后面加个? 表示非贪婪匹配。</div><div class="line">var reg = <span class="regexp">/&lt;(?!img)(?:.|\r|\n)*?&gt;/gi</span>;</div><div class="line">str.match(reg);</div><div class="line"><span class="regexp">//</span> 返回结果 [<span class="string">"&lt;div class="</span>o2<span class="string">"&gt;"</span>, <span class="string">"&lt;div class="</span>o2_team<span class="string">"&gt;"</span>, <span class="string">"&lt;/div&gt;"</span>, <span class="string">"&lt;/div&gt;"</span>]</div></pre></td></tr></table></figure>
<ul>
<li>反向引用：主要作用是给分组加上标识符\n。<br><code>\n</code> 表示引用字符，与第n个子表达式第一次匹配的字符相匹配。</li>
</ul>
<p>反向引用的例子，给MikeMike字符后加个单引号：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(Mike)(\1)(s)/;</div><div class="line"><span class="keyword">var</span> str = <span class="string">"MikeMikes"</span>;</div><div class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span>,<span class="string">"$1$2'$3"</span>));</div><div class="line"><span class="comment">// 返回结果 MikeMike's</span></div></pre></td></tr></table></figure>
<h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p><code>\s</code> 任何空白字符。即<code>[ \f\n\r\t\v]</code><br><code>\S</code> 任何非空白字符。<br><code>\t</code> Tab 字符(\u0009)。<br><code>\n</code> 换行符(\u000A)<br><code>\v</code> 垂直制表符(\u000B)。<br><code>\f</code> 换页符(\u000C)<br><code>\r</code> 回车符(\u000D)。</p>
<p>注意：<code>\n</code>和<code>\r</code>一起使用，即 <code>/[\r\n]/g</code>来匹配换行，因为unix扩展的系统以<code>\n</code>标志结尾，window以<code>\r\n</code>标志结尾。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>\cx</code>  匹配 x 指示的<strong>控制字符</strong>，要求x 的值必须在 A-Z 或 a-z 范围内。<br><code>\xn</code>  匹配n，n 是一个十六进制转义码，两位数长。<br><code>\un</code> 匹配 n，其中n 是以四位十六进制数表示的 Unicode 字符。</p>
<p><code>\nm</code> 或 \n  先尝试<strong>反向引用</strong>，不可则再尝试标识为一个八进制转义码。<br><code>\nml</code> 当n 是八进制数字 (0-3)，m 和 l 是八进制数字 (0-7) 时，匹配八进制转义码 nml。</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul>
<li><code>i</code>   执行不区分大小写的匹配。</li>
<li><code>g</code>   执行一个全局匹配，简而言之，即找到所有的匹配，而不是在找到第一个之后就停止。</li>
<li><code>m</code>   多行匹配模式，^匹配一行的开头和字符串的开头，$匹配行的结束和字符串的结束。</li>
</ul>
<p>ES6新增u和y修饰符：</p>
<ul>
<li><code>u</code>修饰符</li>
</ul>
<p>含义为“Unicode模式”，用来正确处理大于\uFFFF的Unicode字符。也就是说，会正确处理四个字节的UTF-16编码。 </p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 加u修饰符以后，ES6就会识别<span class="symbol">\u</span>D83D<span class="symbol">\u</span>DC2A为一个字符，返回false。</div><div class="line">/^<span class="symbol">\u</span>D83D/u.test('<span class="symbol">\u</span>D83D<span class="symbol">\u</span>DC2A')  // false</div><div class="line">/^<span class="symbol">\u</span>D83D/.test('<span class="symbol">\u</span>D83D<span class="symbol">\u</span>DC2A') // true</div></pre></td></tr></table></figure>
<ul>
<li><code>y</code>修饰符</li>
</ul>
<p>与g修饰符都是全局匹配，不同之处在于：lastIndex属性指定每次搜索的开始位置，<code>g</code>修饰符从这个位置开始向后搜索，直到发现匹配为止；但是<code>y</code>修饰符要求必须在lastIndex指定的位置发现匹配，即<code>y</code>修饰符确保匹配必须从剩余的第一个位置开始，这也是“粘连”的涵义。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/b/y</span>.exec(<span class="string">'aba'</span>)  <span class="regexp">//</span> null </div><div class="line"><span class="regexp">/b/</span>.exec(<span class="string">'aba'</span>)  <span class="regexp">//</span> [<span class="string">"b"</span>]</div></pre></td></tr></table></figure>
<h2 id="优先级顺序："><a href="#优先级顺序：" class="headerlink" title="优先级顺序："></a>优先级顺序：</h2><ol>
<li><code>\</code>   转义符</li>
<li><code>(), (?:), (?=), []</code>   括号和中括号</li>
<li><code>*、+、?、{n}、{n,}、{n,m}</code>  限定符</li>
<li>任何元字符<code>^、$、\</code>    定位点和序列</li>
<li><code>|</code>    替换</li>
</ol>
<h2 id="关于引擎"><a href="#关于引擎" class="headerlink" title="关于引擎"></a>关于引擎</h2><p>JS 是 NFA 引擎。 </p>
<p>NFA 引擎的特点：</p>
<ul>
<li><strong>以贪婪方式进行，尽可能匹配更多字符</strong>。 </li>
<li><strong>急于邀功请赏，所以最左子正则式优先匹配成功，因此偶尔会错过最佳匹配结果（多选条件分支的情况）</strong>。</li>
</ul>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">'nfa</span> <span class="keyword">not</span>'.match(/nfa|nfa <span class="keyword">not</span>/)</div><div class="line">//  返回[<span class="string">"nfa"</span>]</div></pre></td></tr></table></figure>
<ul>
<li><strong>回溯（backtracking），导致速度慢</strong>。</li>
</ul>
<p>举个贪婪与回溯结合的例子：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"AB01CD23CD45CEff"</span>.match(<span class="string">'AB.*CD'</span>)</div><div class="line"><span class="regexp">//</span> 返回 [<span class="string">"AB01CD23CD"</span>]</div></pre></td></tr></table></figure>
<p>匹配顺序如图所示：</p>
<p><img src="//misc.aotu.io/Newcandy/2016-11-16-regexp-theory/backtracking.png" alt="match"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>MDN<br>w3school<br><a href="http://es6.ruanyifeng.com/#docs/regex" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/regex</a><br><a href="http://imweb.io/topic/56e804ef1a5f05dc50643106" target="_blank" rel="external">http://imweb.io/topic/56e804ef1a5f05dc50643106</a><br><a href="http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" target="_blank" rel="external">http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html</a><br><a href="http://www.cnblogs.com/hustskyking/p/how-regular-expressions-work.html" target="_blank" rel="external">http://www.cnblogs.com/hustskyking/p/how-regular-expressions-work.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习正则表达式的你们，有没有发现，一开始总是记不住语法。嗯，加深大家的印象的同时，我也是来找同道中人的。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="正则表达式" scheme="https://aotu.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="String方法" scheme="https://aotu.io/tags/String%E6%96%B9%E6%B3%95/"/>
    
      <category term="RegExp方法" scheme="https://aotu.io/tags/RegExp%E6%96%B9%E6%B3%95/"/>
    
      <category term="回溯" scheme="https://aotu.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>XCel 项目总结 - Electron 与 Vue 的性能优化</title>
    <link href="https://aotu.io/notes/2016/11/15/xcel/"/>
    <id>https://aotu.io/notes/2016/11/15/xcel/</id>
    <published>2016-11-15T15:23:23.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>XCEL 是由京东用户体验设计部凹凸实验室推出的一个 Excel 数据清洗工具，其通过可视化的方式让用户轻松地对 Excel 数据进行筛选。</p>
<p>XCEL 基于 Electron 和 Vue 2.0 进行开发，充分利用 Electron 多进程任务处理等功能，使其拥有高性能、跨平台（windows 7+、Mac 和 Linux）的特性。</p>
<p>落地页：<a href="https://xcel.aotu.io/" target="_blank" rel="external">https://xcel.aotu.io/</a>   ✨✨✨<br>项目地址：<a href="https://github.com/o2team/xcel" target="_blank" rel="external">https://github.com/o2team/xcel</a>   ✨✨✨  </p>
<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>用户研究的定量研究和轻量级数据处理中，均需对数据进行清洗处理，用以剔除异常数据，保证数据结果的信度和效度。目前因调研数据和轻量级数据的多变性，对轻量级数据清洗往往采取人工清洗，缺少统一、标准的清洗流程，但对于调研和轻量级的数据往往是需要保证数据稳定性的，因此，在对数据进行清洗的时候最好有可以标准化的清洗方式。</p>
<h2 id="特性一览"><a href="#特性一览" class="headerlink" title="特性一览"></a>特性一览</h2><ul>
<li>基于 Electron 研发并打包成为原生应用，用户体验良好；</li>
<li>可视化操作 Excel 数据，支持文件的导入导出；</li>
<li>拥有单列运算逻辑、多列运算逻辑和双列范围逻辑三种筛选方式，并且可通过“且”、“或”和“编组”的方式任意组合。</li>
</ul>
<h2 id="思路与实现"><a href="#思路与实现" class="headerlink" title="思路与实现"></a>思路与实现</h2><p>结合用研组的需求，我们利用 Electron 和 Vue 的特性对该工具进行开发。</p>
<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><ul>
<li>Electron：桌面端跨平台框架，为 Web 提供了原生接口的权限。打包后的程序兼容 Windows 7 及以上、Mac、Linux 的 32 / 64 位系统。<a href="http://electron.atom.io/" target="_blank" rel="external">详情&gt;&gt;</a></li>
<li>Vue 全家桶：Vue 拥有数据驱动视图的特性，适合重数据交互的应用。<a href="http://vuejs.org/" target="_blank" rel="external">详情&gt;&gt;</a></li>
<li>js-xlsx：各种电子表格格式的解析器和生成器。纯 JavaScript 实现，适用于 Node.js 和 Web 前端。<a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="external">详情&gt;&gt;</a></li>
</ul>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol>
<li>通过 js-xlsx 解析 Excel 文件生成 JSON 格式  </li>
<li>根据筛选条件对 JSON 数据进行筛选过滤  </li>
<li>将过滤后的 JSON 数据生成 js-xlsx 指定的数据结构  </li>
<li>利用 js-xlsx 对转换后的数据生成 Excel 文件  </li>
</ol>
<hr>
<p><strong>纸上得来终觉浅，绝知此事要躬行</strong></p>
<h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><p>如果对某项技术比较熟悉可略读/跳过。</p>
<h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><h4 id="Electron-是什么？"><a href="#Electron-是什么？" class="headerlink" title="Electron 是什么？"></a>Electron 是什么？</h4><p>Electron 是一个能让你通过 <strong>JavaScript、HTML 和 CSS</strong> 构建桌面应用的<strong>框架</strong>。这些应用能打包到 Mac、Windows 和 Linux 电脑上运行，当然它们也能上架到 Mac 和 Windows 的 app stores。</p>
<ul>
<li><strong>JavaScript、HTML 和 CSS</strong> 都是 Web 语言，这就意味着它们都是组成网站的一部分，浏览器（如 Chrome）能将这些代码转为可视化图像。</li>
<li><strong>Electron 是一个框架</strong>：Electron 对底层代码进行抽象和封装，让开发者能在此之上构建项目。</li>
</ul>
<h4 id="为什么它如此重要？"><a href="#为什么它如此重要？" class="headerlink" title="为什么它如此重要？"></a>为什么它如此重要？</h4><p>通常来说，桌面应用都需要用每个操作系统对应的原生语言进行开发。这意味着需要拥有 3 个团队为这个应用编写 3 个相应的版本。Electron 则允许你通过 web 语言编写一次即可。</p>
<ul>
<li><strong>原生（操作系统）语言</strong>：用于开发主流操作系统的应用的原生语言如下（大多数情况下）：Mac 对应 Objective C、Linux 对应 C、Windows 对应 C++。</li>
</ul>
<h4 id="它由什么组成？"><a href="#它由什么组成？" class="headerlink" title="它由什么组成？"></a>它由什么组成？</h4><p>Electron 结合了 <strong>Chromium</strong>、<strong>Node.js</strong> 和用于调用操作系统本地功能的 API（如打开文件窗口、通知、图标等）。</p>
<ul>
<li><strong>Chromium</strong>：Google 创造的一个开源库，并用于 Google 的浏览器 Chrome。</li>
<li><strong>Node.js（Node）</strong>：一个用于在服务器运行 JavaScript 的运行时（runtime），它拥有文件系统和网络的权限（你的电脑也可以是一台服务器！）。</li>
</ul>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/components.jpg" alt="Electron 的组成"></p>
<h4 id="开发体验如何？"><a href="#开发体验如何？" class="headerlink" title="开发体验如何？"></a>开发体验如何？</h4><p>基于 Electron 的开发，就好像开发一个网页一样，而且能够无缝地 <strong>使用 Node</strong>。或者说：就好像构建一个 Node app，并通过 HTML 和 CSS 构建界面。另外，你只需为一个浏览器（<strong>最新的 Chrome</strong>）进行设计（即无需考虑兼容性）。</p>
<ul>
<li><strong>使用内置的 Node</strong>：这还不是全部！除了 Node API，你还可以使用托管在 npm 上，超过 350,000 个的模块。 </li>
<li><strong>一个浏览器</strong>：并非所有浏览器都提供一致的样式，因此 web 设计师和开发者时常不得不花费更多的精力去让一个网站在不同的浏览器上看起来一致。</li>
<li><strong>最新的 Chrome</strong>：可使用超过 90% 的 ES2015 特性和其它很酷的特性（如 CSS 变量）。</li>
</ul>
<h4 id="两个进程（重点）"><a href="#两个进程（重点）" class="headerlink" title="两个进程（重点）"></a>两个进程（重点）</h4><p>Electron 有两个种进程：『主进程』和『渲染进程』。有些模块只能工作在其中一个进程上，而有些则能工作在两个进程上。主进程更多地充当幕后角色，而渲染进程则是应用的每个窗口。<br>PS：可通过任务管理器（PC）/活动监视器（Mac）查看进程的相关信息。</p>
<ul>
<li><strong>模块</strong>：Electron 的 API 是根据它们的功能进行分组。例如：<code>dialog</code> 模块拥有所有原生 dialog 的 API，如打开文件、保存文件和弹窗。</li>
</ul>
<h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><p>主进程，通常是一个命名为 <code>main.js</code> 的文件，该文件是每个 Electron 应用的入口。它控制了应用的生命周期（从打开到关闭）。它能<strong>调用原生元素</strong>和创建新的（多个）渲染进程，而且整个 Node API 是内置其中的。</p>
<ul>
<li><strong>调用原生元素</strong>：打开 diglog 和其它操作系统交互均是资源密集型操作（注：出于安全考虑，渲染进程是不能直接调用本地资源的），因此都需要在主进程完成。</li>
</ul>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/main.jpg" alt="主进程"></p>
<h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>渲染进程是应用的一个浏览器窗口。与主进程不同，它能存在多个（注：一个 Electron 应用只能有一个主进程）并且是<strong>相互独立的</strong>。它们也能是<strong>隐藏的</strong>。它通常被命名为 <code>index.html</code>。它们就像典型的 HTML 文件，但在 Electron 中，它们能获取完整的 Node API 特性。因此，这也是它与其它浏览器不同的地方。</p>
<ul>
<li><strong>相互独立</strong>：每个渲染进程都是独立的，这意味着就算它们某个崩溃了，也不会影响其余的渲染进程。</li>
<li><strong>隐藏的</strong>：你可以设置一个窗口是隐藏的，然后让它只在背后执行代码（👍）。</li>
</ul>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/renderer.jpg" alt="渲染进程"></p>
<h4 id="把它们想象成这样"><a href="#把它们想象成这样" class="headerlink" title="把它们想象成这样"></a>把它们想象成这样</h4><p>在 Chrome（或其它浏览器）中的每个标签页（tab） 和其内的页面，就好比 Electron 中的一个单独渲染进程。如果你关闭所有标签页，Chrome 依然存在，这好比 Electron 的主进程，而且你能打开一个新的窗口或关闭这个应用。</p>
<blockquote>
<p>注：一般情况下，在 Chrome 浏览器中，一个标签页（tab）中的页面（即除了浏览器本身部分，如搜索框、工具栏等）就是一个渲染进程。</p>
</blockquote>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/like-this.jpg" alt="把它们想象成这样"></p>
<h4 id="相互通讯"><a href="#相互通讯" class="headerlink" title="相互通讯"></a>相互通讯</h4><p>尽管主进程和渲染进程都有各自的任务，但它们之间也有需要协同完成的任务。因此它们之间需要通讯。<strong>IPC</strong>就为此而生，它提供了进程间的通讯。但它只能在主进程与渲染进程之间传递信息。</p>
<ul>
<li><strong>IPC</strong>：主进程和渲染进程都有一个 IPC 模块。</li>
</ul>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/ipc.jpg" alt="此处输入图片的描述"></p>
<h4 id="汇成一句话"><a href="#汇成一句话" class="headerlink" title="汇成一句话"></a>汇成一句话</h4><p>Electron 应用就像 Node 应用，它也依赖一个 <code>package.json</code>  文件。该文件定义了哪个文件作为主进程，并因此让 Electron  知道从何启动你的应用。然后主进程能创建渲染进程，并能使用 IPC 让两者间进行消息传递。</p>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/app-files.jpg" alt="汇成一句话"></p>
<p>至此，Electron 的基础部分介绍完毕。该部分是基于我之前翻译的一篇文章<a href="http://jlord.us/essential-electron/" target="_blank" rel="external">《Essential Electron》</a>，译文可点击 <a href="https://segmentfault.com/a/1190000007503495" target="_blank" rel="external">这里</a>。</p>
<hr>
<h3 id="Vue-全家桶"><a href="#Vue-全家桶" class="headerlink" title="Vue 全家桶"></a>Vue 全家桶</h3><p>目前，该工具应用了 Vue、Vuex、Vuex-router。在工具基本定型阶段，由 1.x 升级到了 2.0 （Vuex 暂未升级）。</p>
<h4 id="为什么选择-Vue"><a href="#为什么选择-Vue" class="headerlink" title="为什么选择 Vue"></a>为什么选择 Vue</h4><p>对于我来说：</p>
<ul>
<li>简单易用，一般使用只需看官方文档。</li>
<li>数据驱动视图，所以基本不用操作 DOM 了。</li>
<li>框架的存在是为了帮助我们应对复杂度。</li>
<li>全家桶的好处是：对于一般场景，我就不需要考虑用哪些个库（插件）。</li>
</ul>
<p>Vue 1.x -&gt; Vue 2.0 的版本迁移用 <a href="https://github.com/vuejs/vue-migration-helper" target="_blank" rel="external">vue-migration-helper</a> 即可分析出大部分需要更改的地方。</p>
<p>网上已经有很多关于 Vue 的信息了。至此，Vue 部分介绍完毕。</p>
<hr>
<h3 id="js-xlsx"><a href="#js-xlsx" class="headerlink" title="js-xlsx"></a>js-xlsx</h3><p>该库支持各种电子表格格式的解析和生成。它由纯 JavaScript 实现，适用于前端和 Node。<a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="external">详情&gt;&gt;</a></p>
<p>支持读入的格式有：</p>
<ul>
<li>Excel 2007+ XML Formats (XLSX/XLSM)</li>
<li>Excel 2007+ Binary Format (XLSB)</li>
<li>Excel 2003-2004 XML Format (XML “SpreadsheetML”)</li>
<li>Excel 97-2004 (XLS BIFF8)</li>
<li>Excel 5.0/95 (XLS BIFF5)</li>
<li>OpenDocument Spreadsheet (ODS)</li>
</ul>
<p>支持写的格式有：</p>
<ul>
<li>XLSX</li>
<li>CSV (and general DSV)</li>
<li>JSON and JS objects (various styles)</li>
</ul>
<p>只要能提供读（解析）和写，剩下的就是靠 JavaScript 处理解析出来的数据（JSON）了。目前该库提供了 <code>sheet_to_json</code> 方法，该方法能将读入的 Excel 数据转为 JSON 格式。由于导出时需要提供特定的 JSON 格式，因此这部分需要我们自己实现。</p>
<p>更多关于 Excel 在 JavaScript 中处理的知识可关注：凹凸实验室的<a href="https://aotu.io/notes/2016/04/07/node-excel/">《Node读写Excel文件探究实践》</a>。但该文章存在两处问题（均在 js-xlsx 实战的导出表格部分）：</p>
<ol>
<li>生成头部时，Excel 的列信息简单地通过 <code>String.fromCharCode(65+j)</code> 生成，但列大于 26 时就会出现问题。这个问题会在后面章节中给出解决方案；</li>
<li>转换成 worksheet 需要的结构处，出现逻辑性错误，并且会导致严重的性能问题。逻辑问题在此不讲述，我们讲下性能问题：<br>ECMAScript 的不断更新，让 JavaScript 更加强大和易用。尽管如此，我们还是要做到『物尽所用』，而不要『大材小用』，否则会得到反效果。这里导致性能问题的正是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign()</a> 方法，该方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。由于该方法自身的实现机制，会在这里产生大量的冗余操作。而这里的单元格信息是唯一的，所以直接通过 forEach 为一个空对象赋值即可。提升 N 倍性能的同时，也把逻辑性错误解决了。</li>
</ol>
<p>原来的：<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var result = 某数组.reduce(<span class="function"><span class="params">(prev, <span class="built_in">next</span>)</span> =&gt;</span> Object.assign(&#123;&#125;, prev, &#123;[<span class="built_in">next</span>.position]: &#123;<span class="name">v</span>: <span class="built_in">next</span>.v&#125;&#125;), &#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>改为：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var result = 某数组.forEach(<span class="function"><span class="params">(v, i)</span> =&gt;</span> data[v.position]= &#123;v: v.v&#125;)</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>实践是检验真理的唯一标准</strong><br>在理解上述知识的前提下，下面就谈谈一些在实践中总结出来的<strong>技巧、难点和重点</strong>。</p>
<h2 id="CSS、JavaScript-和-Electron-相关的知识和技巧"><a href="#CSS、JavaScript-和-Electron-相关的知识和技巧" class="headerlink" title="CSS、JavaScript 和 Electron 相关的知识和技巧"></a>CSS、JavaScript 和 Electron 相关的知识和技巧</h2><h3 id="高亮-table-的列"><a href="#高亮-table-的列" class="headerlink" title="高亮 table 的列"></a>高亮 table 的列</h3><p>Excel 单元格采用 <code>table</code> 展示。在 Excel 中，被选中的单元格会高亮相应的『行』和『列』，以提醒用户。在该应用中也有做相应处理，横向高亮采用 <code>tr:hover</code> 实现，而纵向呢？这里所采用的一个技巧是：</p>
<p>假设 HTML 结构如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.container</span></div><div class="line">  <span class="selector-tag">table</span></div><div class="line">    <span class="selector-tag">tr</span></div><div class="line">      td</div></pre></td></tr></table></figure></p>
<p>CSS 代码如下：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">overflow</span>:hidden; &#125;</div><div class="line"><span class="selector-tag">td</span> &#123; <span class="attribute">position</span>: relative; &#125;</div><div class="line"><span class="selector-tag">td</span>:hover::after &#123; </div><div class="line">  <span class="attribute">position</span>: absolute; </div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>; </div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>; </div><div class="line">  <span class="attribute">top</span>: -<span class="number">1</span>个亿px; <span class="comment">// 小目标达成，不过是负的😭</span></div><div class="line">  <span class="attribute">bottom</span>: -<span class="number">1</span>个亿px; </div><div class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>; <span class="comment">// 避免遮住自身和同列 td 的内容、border 等</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="斜分割线"><a href="#斜分割线" class="headerlink" title="斜分割线"></a>斜分割线</h3><p>如图：<img src="//misc.aotu.io/JChehe/2016-11-15-xcel/fenge.jpg" alt="斜分割线"></p>
<p>分割线可以通过 <code>::after/::before</code> 伪类元素实现一条直线，然后通过 <code>transform:rotate();</code> 旋转特定角度实现。但这种实现的一个问题是：由于宽度是不定的，因此需要通过 JavaScript 运算才能得到准确的对角分割线。</p>
<p>因此，这里可以通过 CSS 线性渐变 <code>linear-gradient(to top right, transparent, transparent calc(50% - .5px), #d3d6db calc(50% - .5px), #d3d6db calc(50% + .5px), transparent calc(50% + .5px))</code> 实现。无论宽高如何变，依然妥妥地自适应。</p>
<h3 id="Excel-的列转换"><a href="#Excel-的列转换" class="headerlink" title="Excel 的列转换"></a>Excel 的列转换</h3><ul>
<li>Excel 的列需要用『字母』表示，但不能简单地通过 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="external">String.fromCharCode()</a> 实现，因为当超出 <code>26列</code> 时会产生问题（如：第 <code>27</code> 列，<code>String.fromCharCode(65+26)</code> 得到的是 <code>[</code>，而不是 <code>AA</code>）。因此，这需要通过『十进制和26进制转换』算法来实现。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将指定的自然数转换为26进制表示。映射关系：[0-25] -&gt; [A-Z]。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCharCol</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> temCol = <span class="string">''</span>,</div><div class="line">    s = <span class="string">''</span>,</div><div class="line">    m = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">    m = n % <span class="number">26</span> + <span class="number">1</span></div><div class="line">    s = <span class="built_in">String</span>.fromCharCode(m + <span class="number">64</span>) + s</div><div class="line">    n = (n - m) / <span class="number">26</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将指定的26进制转换为自然数。映射关系：[A-Z] -&gt;[0-25]。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumCol</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> n = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = s.length - <span class="number">1</span>, j = <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, j *= <span class="number">26</span>) &#123;</div><div class="line">    <span class="keyword">let</span> c = s[i].toUpperCase()</div><div class="line">    <span class="keyword">if</span> (c &lt; <span class="string">'A'</span> || c &gt; <span class="string">'Z'</span>) <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    n += (c.charCodeAt() - <span class="number">64</span>) * j - <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为-DOM-的-File-对象增加了-path-属性"><a href="#为-DOM-的-File-对象增加了-path-属性" class="headerlink" title="为 DOM 的 File 对象增加了 path 属性"></a>为 DOM 的 File 对象增加了 path 属性</h3><p>Electron 为 File 对象额外增了 path 属性，该属性可得到文件在文件系统上的真实路径。因此，你可以利用 Node 为所欲为😈。应用场景有：拖拽文件后，通过 Node 提供的 File API 读取文件等。</p>
<h3 id="支持常见的编辑功能，如粘贴和复制"><a href="#支持常见的编辑功能，如粘贴和复制" class="headerlink" title="支持常见的编辑功能，如粘贴和复制"></a>支持常见的编辑功能，如粘贴和复制</h3><p>Electron 应用在 MacOS 中默认不支持『复制』『粘贴』等常见编辑功能，因此需要为 MacOS 显式地设置复制粘贴等编辑功能的菜单栏，并为此设置相应的快捷键。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// darwin 就是 MacOS</div><div class="line">if (process.platform === <span class="string">'darwin'</span>) &#123;</div><div class="line">    var template = [&#123;</div><div class="line">      <span class="keyword">label</span><span class="bash">: <span class="string">'FromScratch'</span>,</span></div><div class="line">      submenu: [&#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Quit'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+Q'</span>,</div><div class="line">        click: function() &#123; app.quit(); &#125;</div><div class="line">      &#125;]</div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="keyword">label</span><span class="bash">: <span class="string">'Edit'</span>,</span></div><div class="line">      submenu: [&#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Undo'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+Z'</span>,</div><div class="line">        selector: <span class="string">'undo:'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Redo'</span>,</span></div><div class="line">        accelerator: <span class="string">'Shift+CmdOrCtrl+Z'</span>,</div><div class="line">        selector: <span class="string">'redo:'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        type: <span class="string">'separator'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Cut'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+X'</span>,</div><div class="line">        selector: <span class="string">'cut:'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Copy'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+C'</span>,</div><div class="line">        selector: <span class="string">'copy:'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Paste'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+V'</span>,</div><div class="line">        selector: <span class="string">'paste:'</span></div><div class="line">      &#125;, &#123;</div><div class="line">        <span class="keyword">label</span><span class="bash">: <span class="string">'Select All'</span>,</span></div><div class="line">        accelerator: <span class="string">'CmdOrCtrl+A'</span>,</div><div class="line">        selector: <span class="string">'selectAll:'</span></div><div class="line">      &#125;]</div><div class="line">    &#125;];</div><div class="line">    var osxMenu = menu.buildFromTemplate(template);</div><div class="line">    menu.setApplicationMenu(osxMenu);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="更贴近原生应用"><a href="#更贴近原生应用" class="headerlink" title="更贴近原生应用"></a>更贴近原生应用</h3><p>Electron 的一个缺点是：即使你的应用是一个简单的时钟，但它也不得不包含完整的基础设施（如 Chromium、Node 等）。因此，一般情况，打包后的程序至少会达到几十兆（根据系统类型进行浮动）。当你的应用越复杂，就越可以忽略这部分了。</p>
<p>众所周知，页面的渲染难免会导致『白屏』，而且这里采用了 Vue 框架，情况就更加糟糕了。另外，Electron 应用也避免不了『先打开浏览器，再渲染页面』的步骤。下面提供几种方法来减轻这种情况，以让程序更贴近原生应用。</p>
<ol>
<li>指定 BrowserWindow 的背景颜色；</li>
<li>先隐藏窗口，直到页面加载后再显示；</li>
<li>保存窗口的尺寸和位置，以让程序下次被打开时，依然保留的同样大小和出现在同样的位置上。</li>
</ol>
<p>对于第一点，若程序的背景不是纯白（#fff）的，那么可指定窗口的背景颜色与其一致，以避免突变。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">mainWindow</span> = new BrowserWindow(&#123;</div><div class="line">    title: <span class="string">'XCel'</span>,</div><div class="line">    backgroundColor: <span class="string">'#f5f5f5'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>对于第二点，由于 Electron 本质是一个浏览器，需要加载非网页部分的资源。因此，我们可以先隐藏窗口。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> mainWindow = <span class="built_in">new</span> BrowserWindow(&#123;</div><div class="line">    <span class="built_in">title</span>: 'ElectronApp',</div><div class="line">    <span class="built_in">show</span>: <span class="literal">false</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>等到渲染进程开始渲染页面的那一刻，在 <code>ready-to-show</code> 的回调函数中显示窗口。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mainWindow.<span class="keyword">on</span>(<span class="string">'ready-to-show'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;</span></span></div><div class="line">    mainWindow.show();</div><div class="line">    mainWindow.focus();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>对于第三点，我并没有实现，原因如下：</p>
<ol>
<li>用户一般是根据当时的情况对程序的尺寸和位置进行调整，即视情况而定。</li>
<li>以上是我个人臆测，主要是我懒🐶。</li>
</ol>
<p>其实现方式，可参考<a href="https://blog.avocode.com/blog/4-must-know-tips-for-building-cross-platform-electron-apps" target="_blank" rel="external">《4 must-know tips for building cross platform Electron apps》</a>。</p>
<h3 id="如何在渲染进程调用原生弹框？"><a href="#如何在渲染进程调用原生弹框？" class="headerlink" title="如何在渲染进程调用原生弹框？"></a>如何在渲染进程调用原生弹框？</h3><p>在渲染进程中调用原本专属于主进程中的 API （如弹框）的方式有两种：</p>
<ol>
<li>IPC 通讯模块：先在主进程通过 ipcMain 进行监听，然后在渲染进程通过 ipcRenderer 进行触发；</li>
<li><p>remote 模块：该模块提供了一种在渲染进程（网页）和主进程之间进行进程间通讯（IPC）的简便途径。</p>
<ul>
<li>对于第一种，有需要就在评论区留言；</li>
<li>对于第二种， 在渲染进程中，运行以下代码即可：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   const remote = require(<span class="string">'electron'</span>)<span class="selector-class">.remote</span></div><div class="line">   </div><div class="line">   remote<span class="selector-class">.dialog</span><span class="selector-class">.showMessageBox</span>(&#123;</div><div class="line">	type: <span class="string">'question'</span>,</div><div class="line">	buttons: [<span class="string">'不告诉你'</span>, <span class="string">'没有梦想'</span>],</div><div class="line">	defaultId: <span class="number">0</span>,</div><div class="line">	title: <span class="string">'XCel'</span>,</div><div class="line">	message: <span class="string">'你的梦想是什么？'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h3 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h3><p>如果 Electron 应用没有了自动更新的功能，那么意味着用户想体验你新开发的功能或用上修复 Bug 后的新版本，只能靠自己主动地去官网下载，这无疑是糟糕的体验。Electron 提供的 <a href="http://electron.atom.io/docs/api/auto-updater/" target="_blank" rel="external">autoUpdater</a> 模块可实现自动更新功能，该模块提供了第三方框架 <a href="https://github.com/Squirrel" target="_blank" rel="external">Squirrel</a> 的接口，但 Electron 目前只内置了 <a href="https://github.com/Squirrel/Squirrel.Mac" target="_blank" rel="external">Squirrel.Mac</a>，且它与 <a href="https://github.com/Squirrel/Squirrel.Windows" target="_blank" rel="external">Squirrel.Windows</a>（需要额外引入）的处理方式也不一致（在客户端与服务器端两方面），因此如果刚接触该模块，会发现处理起来相对比较繁琐。具体可以参考我的一篇译文<a href="https://segmentfault.com/a/1190000007616641" target="_blank" rel="external">《Electron 自动更新的完整教程（Windows 和 OSX）》</a>。</p>
<blockquote>
<p>目前 Electron 的 autoUpdater 模块不支持 Linux 系统。</p>
</blockquote>
<p>另外，XCel 目前并没有采用 autoUpdater 模块实现自动更新功能，而是利用 Electron 的 <a href="http://electron.atom.io/docs/api/download-item/" target="_blank" rel="external">DownloadItem</a> 模块实现。而服务器端则采用 <a href="https://nuts.gitbook.com/" target="_blank" rel="external">Nuts</a>。</p>
<p>至此，CSS、JavaScript 和 Electron 相关的知识和技巧 部分阐述完毕。</p>
<hr>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>下面谈谈『性能优化』，这部分涉及到<strong>运行效率</strong>和<strong>内存占用量</strong>。<br>注：以下内容均基于 Excel 样例文件（数据量为：1913 行 x 180 列）得出的结论。</p>
<h3 id="执行效率和渲染的优化"><a href="#执行效率和渲染的优化" class="headerlink" title="执行效率和渲染的优化"></a>执行效率和渲染的优化</h3><h4 id="Vue-性能真的好？"><a href="#Vue-性能真的好？" class="headerlink" title="Vue 性能真的好？"></a>Vue 性能真的好？</h4><p>Vue 一直标榜着自己性能优异，但当数据量上升到一定量级时（如 1913 x 180 ≈ 34 万个数据单元），会出现严重的性能问题（不做相应优化的前提下）。</p>
<p>如直接通过列表渲染 <code>v-for</code> 渲染数据时，会导致程序卡死。<br>答：通过查阅相关资料可得（猜测）， <code>v-for</code> 是通过一条条数据在构建后插入 DOM 的，这对于数据量较大时，无疑会造成严重的性能问题。   </p>
<p>当时，我想到了两种解决思路：</p>
<ol>
<li>Vue 是数据驱动视图的，对数据分段 push，即将一个庞大的任务分割为 N 份。</li>
<li>自己拼接 HTML 字符串，再通过 innerHTML 一次性插入。</li>
</ol>
<p>最终，我选择了第二条，理由是：</p>
<ol>
<li>性能最佳，因为每次执行数据过滤时，Vue 都要进行 diff，性能不佳。</li>
<li>更符合当前应用的需求：纯展示且无需动画过渡等。</li>
<li>实现更简单</li>
</ol>
<p>将原本繁重的 DOM 操作转移到了 JavaScript 的拼接字符串后，性能得到了很大提升（不会导致程序卡死而渲染不出视图）。这种实现原理难道不就是 Vue、React 等框架解决的问题之一吗？只不过框架考虑的场景更广，有些地方需要我们自己根据实际情况进行优化而已。</p>
<blockquote>
<p>在浏览器当中，JavaScript 的运算在现代的引擎中非常快，但 DOM 本身是非常缓慢的东西。当你调用原生 DOM API 的时候，浏览器需要在 JavaScript 引擎的语境下去接触原生的 DOM 的实现，这个过程有相当的性能损耗。所以，本质的考量是，要把耗费时间的操作尽量放在纯粹的计算中去做，保证最后计算出来的需要实际接触真实 DOM 的操作是最少的。 —— <a href="http://www.infoq.com/cn/articles/vue-2-progressive-front-end-solution" target="_blank" rel="external">《Vue 2.0——渐进式前端解决方案》</a></p>
</blockquote>
<p>当然，由于 JavaScript 天生单线程，即使执行数速度再快，也会导致页面有短暂的时间拒绝用户的输入。此处可通过 Web Worker 或其它方式解决，这也将是我们后续讲到的问题。</p>
<p>也有网友提供了优化大量列表的方法：<a href="https://clusterize.js.org/。" target="_blank" rel="external">https://clusterize.js.org/。</a> 但在这里我并没有采用此方式。</p>
<h4 id="强大的-GPU-加速"><a href="#强大的-GPU-加速" class="headerlink" title="强大的 GPU 加速"></a>强大的 GPU 加速</h4><p>插入 DOM 后，又会出现了另外一个问题：滚动会很卡。猜想这是渲染问题，毕竟 34 万个单元格同时存在于界面中。</p>
<p>添加 <code>transform: translate3d(0, 0, 0) / translateZ(0)</code> 属性启动 GPU 渲染，即可解决这个渲染性能问题。再次感叹该属性的强大。🐂</p>
<p>后来，考虑到用户并不需要查看全部数据，只需展示部分数据让用户进行参考即可。我们对此只渲染前 30/50 行数据。这样即可提升用户体验，也能进一步优化性能（又是纯属臆测）。</p>
<h4 id="记得关闭-Vuex-的严格模式"><a href="#记得关闭-Vuex-的严格模式" class="headerlink" title="记得关闭 Vuex 的严格模式"></a>记得关闭 Vuex 的严格模式</h4><p>另外，由于自己学艺不精和粗心大意，忘记在生产环境关闭 Vuex 的『严格模式』。<br>Vuex 的严格模式要<strong>在生产中关闭</strong>，否则会对 state 树进行一个深观察 (deep watch)，产生不必要的性能损耗。也许在数据量少时，不会注意到这个问题。</p>
<p>我当时的情况是：导入 Excel 数据后，再进行交互（涉及 Vuex 的读写操作），则需要等几秒才会响应，而直接通过纯 DOM 监听的事件则无此问题。由此，判断出是 Vuex 问题。</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  strict: <span class="built_in">process</span>.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="多进程！！！"><a href="#多进程！！！" class="headerlink" title="多进程！！！"></a>多进程！！！</h2><p>前面说道，JavaScript 天生单线程，即使再快，对于需要处理数据量较大的情况，也会出现拒绝响应的问题。因此需要 Web Worker 或类似的方案去解决。</p>
<p>在这里我不选择 Web worker 的原因有如下几点：</p>
<ol>
<li>有其它更好的替代方案：一个主进程能创建多个渲染进程，通过 IPC 即可进行数据交互；</li>
<li>Electron 不支持 Web Worker！</li>
</ol>
<p>Electron 作者在 2014.11.7 在《state of web worker support?》 issue 中回复了以下这一段：</p>
<blockquote>
<p>Node integration doesn’t work in web workers, and there is no plan to do. Workers in Chromium are implemented by starting a new thread, and Node is not thread safe. Back in past we had tried to add node integration to web workers in Atom, but it crashed too easily so we gave up on it.</p>
</blockquote>
<p>因此，我们最终采用了创建一个新的渲染进程 <code>background process</code> 进行处理数据。由 Electron 章节可知，每个 Electron 渲染进程是独立的，因此它们不会互相影响。但这也带来了一个问题：它们不能相互通讯？</p>
<p>错！下面有 3 种方式进行通讯：</p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" target="_blank" rel="external">Storage API</a>：对某个标签页的 localStorage/sessionStorage 对象进行增删改时，其他标签页能通过 window.storage 事件监听到。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="external">IndexedDB</a>：IndexedDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API。</li>
<li>通过主进程作为中转站：设主界面的渲染进程是 A，<code>background process</code> 是 B，那么 A 先将 Excel 数据传递到主进程，然后主进程再转发到 B。B 处理完后再原路返回，具体如下图。当然，也可以将数据存储在主进程中，然后在多个渲染进程中使用 remote 模块来访问它。</li>
</ol>
<p>该工具采用了第三种方式的第一种情况：<br><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/multiprocess.jpg" alt="Multiprocessing">  </p>
<p>1、主页面渲染进程 A 的代码如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//①</span></div><div class="line">ipcRenderer.send(<span class="string">'filter-start'</span>, &#123;</div><div class="line">    filterTagList: this<span class="selector-class">.filterTagList</span>,</div><div class="line">	filterWay: this<span class="selector-class">.filterWay</span>,</div><div class="line">	curActiveSheetName: this<span class="selector-class">.activeSheet</span><span class="selector-class">.name</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// ⑥ 在某处接收 filter-response 事件</span></div><div class="line">ipcRenderer.on(<span class="string">"filter-response"</span>, (arg) =&gt; &#123;</div><div class="line">    <span class="comment">// 得到处理数据</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>2、作为中转站的主进程的代码如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//②</span></div><div class="line">ipcMain.on(<span class="string">"filter-start"</span>, (event, arg) =&gt; &#123;</div><div class="line">    <span class="comment">// webContents 用于渲染和控制 web page</span></div><div class="line">    backgroundWindow<span class="selector-class">.webContents</span><span class="selector-class">.send</span>(<span class="string">"filter-start"</span>, arg)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// ⑤ 用于接收返回事件</span></div><div class="line">ipcMain.on(<span class="string">"filter-response"</span>, (event, arg) =&gt; &#123;</div><div class="line">    mainWindow<span class="selector-class">.webContents</span><span class="selector-class">.send</span>(<span class="string">"filter-response"</span>, arg)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>3、处理繁重数据的 <code>background process</code> 渲染进程 B 的代码如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ③</span></div><div class="line"><span class="selector-tag">ipcRenderer</span><span class="selector-class">.on</span>(<span class="string">'filter-start'</span>, (event, arg) =&gt; &#123;</div><div class="line">    <span class="comment">// 进行运算</span></div><div class="line">    ... </div><div class="line">    </div><div class="line">    <span class="comment">// ④ 运算完毕后，再通过 IPC 原路返回。主进程和渲染进程 A 也要建立相应的监听事件</span></div><div class="line">    <span class="selector-tag">ipcRenderer</span><span class="selector-class">.send</span>(<span class="string">'filter-response'</span>, &#123;</div><div class="line">        <span class="attribute">filRow</span>: tempFilRow</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>至此，我们将『读取文件』、『过滤数据』和『导出文件』三大耗时的数据操作均转移到了 <code>background process</code> 中处理。</p>
<p>这里，我们只创建了一个 <code>background process</code>，如果想要做得更极致，我们可以新建『CPU 线程数- 1 』 个的 <code>background process</code> 同时对数据进行处理，然后在主进程对处理后数据进行拼接，最后再将拼接后的数据返回到主页面的渲染进程。这样就可以充分榨干 CPU 了。当然，在此我不会进行这个优化。</p>
<blockquote>
<p>不要为了优化而优化，否则得不偿失。 —— 某网友</p>
</blockquote>
<h3 id="内存占有量过大"><a href="#内存占有量过大" class="headerlink" title="内存占有量过大"></a>内存占有量过大</h3><p>解决了执行效率和渲染的问题，发现也存在内存占用量过大的问题。当时猜测是以下几个原因：</p>
<ol>
<li>三大耗时操作均放置在 <code>background process</code> 处理。在通讯传递数据的过程中，由于不是共享内存（因为 IPC 是基于 Socket 的），导致出现多份数据副本（在写该篇文章时才有了这相对确切的答案）。</li>
<li>Vuex 是以一个全局单例的模式进行管理，但它会是不是对数据做了某些封装，而导致性能的损耗呢？</li>
<li>由于 JavaScript 目前不具有主动回收资源的能力，所以只能主动对闲置对象设置为 <code>null</code>，然后等待 GC 回收。</li>
</ol>
<blockquote>
<p> 由于 Chromium 采用多进程架构，因此会涉及到进程间通信问题。Browser 进程在启动 Render 进程的过程中会建立一个以 UNIX Socket 为基础的 IPC 通道。有了 IPC 通道之后，接下来 Browser 进程与 Render 进程就以消息的形式进行通信。我们将这种消息称为 IPC 消息，以区别于线程消息循环中的消息。<br>——<a href="http://blog.csdn.net/luoshengyang/article/details/47822689" target="_blank" rel="external">《Chromium的IPC消息发送、接收和分发机制分析》</a></p>
</blockquote>
<p>定义：为了易于理解，以下『Excel 数据』均指 Excel 的全部有效单元格转为 JSON 格式后的数据。</p>
<p>最容易处理的无疑是第三点，手动将不再需要的变量及时设置为 <code>null</code>。但这效果并不明显。</p>
<p>后来，通过系统的『活动监视器』对该工具的每阶段（打开时、导入文件时、筛选时和导出时）进行粗略的内存分析，得到以下报告（之前分析的、未作修改）： </p>
<p>—————- S：报告分割线 —————-<br>经观察，主要耗内存的是<strong>页面进程</strong>。下面通过截图说明：<br><code>PID 15243</code> 是主进程<br><code>PID 15246</code> 是页面渲染进程<br><code>PID 15248</code> 是 background 渲染进程  </p>
<p>a、首次启动程序时（第 4 行是主进程；第 1 行是页面渲染进程；第 3 行是 background 渲染进程 ）</p>
<p><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/neicun1.png" alt="启动程序时">  </p>
<p>b、导入文件（第 5 行是主进程；第 2 行是页面渲染进程；第 4 行是 background 渲染进程 ）<br><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/neicun2.png" alt="导入文件时"></p>
<p>c、筛选数据（第 4 行是主进程；第 1 行是页面渲染进程；第 3 行是 background 渲染进程 ）<br><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/neicun3.png" alt="筛选数据时">  </p>
<p>由于 JS 目前不具有主动回收资源的功能，所以只能主动将对象设置为 <code>null</code>，然后等待 GC 回收。</p>
<p>因此，经过一段时间等待后，内存占用如下：<br>d、一段时间后（第 4 行是主进程；第 1 行是页面渲染进程；第 3 行是 background 渲染进程 ）<br><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/neicun4.png" alt="一段时间后"></p>
<p>由上述可得，页面渲染进程由于页面元素和 Vue 等 UI 相关资源是固定的，占用内存较大且不能回收。主进程占用资源也不能得到很好释放，暂时不知道原因，而 background 渲染进程则较好地释放资源。</p>
<p>—————- E：报告分割线 —————-</p>
<p>根据报告，初步得出的结论是 Vue 和通讯时占用资源较大。</p>
<p>根据该工具的实际应用场景：由于 Excel 数据只在『导入』和『过滤后』两个阶段需要展示，而且展示的只是通过 JavaScript 拼接的 HTML 字符串构成的 DOM 而已。因此将表格数据放置在 Vuex 中，有点滥用资源的嫌疑。</p>
<p>另外，在 <code>background process</code> 中也有存有一份 Excel 数据副本。因此，索性只在 <code>background process</code> 存储一份 Excel 数据，然后每当数据变化时，通过 IPC 让 <code>background process</code> 返回拼接好的 HTML 字符串即可。这样一来，内存占有量立刻下降许多。而且这也是一个一举多得的优化：</p>
<ol>
<li>字符串拼接操作也转移到了 <code>background process</code>，页面的渲染进程进一步减少耗时的操作；</li>
<li>内存占有量大大减小，响应速度也得到了提升。</li>
</ol>
<p>其实，这也有点像 Vuex 的『全局单例模式管理』，一份数据就好。</p>
<p>当然，对于 Excel 的基本信息，如行列数、SheetName、标题组等均依然保存在 Vuex。</p>
<p>优化后的内存占有量如下图。与上述报告的第三张图相比（同一阶段），内存占有量下降了 44.419%：<br><img src="//misc.aotu.io/JChehe/2016-11-15-xcel/neicun5.png" alt="优化后内存占有量"><br>另外，对于不需要响应的数据，可通过 <code>Object.freeze()</code> 冻结起来。这也是一种优化手段。但该工具目前并没有应用到。</p>
<p>至此，优化部分也阐述完毕了！</p>
<hr>
<p>该工具目前是开源的，欢迎大家使用或推荐给用研组等有需要的人。</p>
<p>你们的反馈（可提交 <a href="https://github.com/o2team/xcel/issues" target="_blank" rel="external">issues</a> / <a href="https://github.com/o2team/xcel/pulls" target="_blank" rel="external">pull request</a>）能让这个工具在使用和功能上不断完善。</p>
<p>最后，感谢 <a href="https://github.com/mamboer" target="_blank" rel="external">LV</a> 的产品规划、界面设计和优化上的强力支持。全文完！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XCEL 是由京东用户体验设计部凹凸实验室推出的一个 Excel 数据清洗工具，其通过可视化的方式让用户轻松地对 Excel 数据进行筛选。&lt;/p&gt;
&lt;p&gt;XCEL 基于 Electron 和 Vue 2.0 进行开发，充分利用 Electron 多进程任务处理等功能，使其
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="node" scheme="https://aotu.io/tags/node/"/>
    
      <category term="excel" scheme="https://aotu.io/tags/excel/"/>
    
      <category term="data-clening" scheme="https://aotu.io/tags/data-clening/"/>
    
      <category term="electron" scheme="https://aotu.io/tags/electron/"/>
    
      <category term="js-xlsx" scheme="https://aotu.io/tags/js-xlsx/"/>
    
      <category term="vue" scheme="https://aotu.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>漫漫编程路上必读的7本书</title>
    <link href="https://aotu.io/notes/2016/11/14/booklist-for-every-programmer/"/>
    <id>https://aotu.io/notes/2016/11/14/booklist-for-every-programmer/</id>
    <published>2016-11-14T08:21:43.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>7本对提升程序员编程思想、软件工程理论大有裨益的通用读物，不分专业，不分语言，不分排名先后。</p>
<h2 id="Code-Complete"><a href="#Code-Complete" class="headerlink" title="Code Complete"></a>Code Complete</h2><p>中文版叫『代码大全』，两届SoftwareJolt Award震撼大奖得主，一本完整的软件构建手册，涵盖了软件构建过程中的所有细节。</p>
<p><a href="http://item.jd.com/11902952.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/code-complete-2.jpg" alt="Code Complete"></a></p>
<p>谷歌度娘搜关键字「程序员必读书本」的结果统计，这本书是最多人推荐的，近年宣称为「最值得程序员阅读的首本书，也是建议程序员推荐给身边小伙伴的首本书」。</p>
<p>想读的朋友可以到我东东家购买，</p>
<ol>
<li><a href="http://item.jd.com/11902952.html" target="_blank" rel="external">代码大全（第2版 英文版）</a></li>
<li><a href="http://item.jd.com/10875285.html" target="_blank" rel="external">代码大全（第2版 中文版）</a></li>
</ol>
<h2 id="The-Pragmatic-Programmer-From-Journeyman-to-Master"><a href="#The-Pragmatic-Programmer-From-Journeyman-to-Master" class="headerlink" title="The Pragmatic Programmer - From Journeyman to Master"></a>The Pragmatic Programmer - From Journeyman to Master</h2><p>中文版叫『程序员修炼之道-从小工到专家』。</p>
<p><a href="http://item.jd.com/1092761685.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/pragmatic.jpg" alt="The Pragmatic Programmer"></a></p>
<p>原版略贵但绝对值的一读，它充满了关于如何改进程序员本身和代码本身的实用建议。</p>
<p>想读的朋友依然可以到我东东家购买，原版有<code>每满100减30</code>的活动。</p>
<ol>
<li><a href="http://item.jd.com/19735922.html" target="_blank" rel="external">程序员修炼之道 英文版）</a></li>
<li><a href="http://item.jd.com/10393278.html" target="_blank" rel="external">程序员修炼之道（第2版 中文版）</a></li>
</ol>
<h2 id="The-Mythical-Man-Month-Essays-on-Software-Engineering"><a href="#The-Mythical-Man-Month-Essays-on-Software-Engineering" class="headerlink" title="The Mythical Man-Month: Essays on Software Engineering"></a>The Mythical Man-Month: Essays on Software Engineering</h2><p>有一个好的中文名叫『人月神话』。</p>
<p><a href="http://item.jd.com/1098651569.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/mythical-man-month.jpg" alt="The Mythical Man-Month: Essays on Software Engineering"></a></p>
<p>引用东东家的一段广告语吧：</p>
<blockquote>
<p>图灵奖得主，IBM 360系统之父，作者Brooks颠覆了项目管理领域，长久不衰传奇著作！软件开发人员、软件项目经理、系统分析师等IT从业者必藏之软工圣经，畅销40年！赠国内实战体验精华册</p>
</blockquote>
<p>然后摘其中的两句经典：</p>
<blockquote>
<p>生一个孩子总是需要九个月的时间，不管安排多少个女性。<br>一个煎蛋，承诺在两分钟内完成，但如果两分钟后还是没有准备好，那么客户有两种选择——等待或吃半熟品，软件客户也只能这样选择。</p>
</blockquote>
<p>正从标题中所说的那样，这是一本关于软件工程的散文集，文辞优美。唯一的缺点就是引用了年迈的古老技术，但是，这并不影响这本书的魅力。</p>
<p>是时候入手一本经典书籍了：</p>
<ol>
<li><a href="http://item.jd.com/1098651569.html" target="_blank" rel="external">人月神话 英文版）</a></li>
<li><a href="http://item.jd.com/11671959.html" target="_blank" rel="external">人月神话（40周年中文纪念版）</a></li>
</ol>
<h2 id="Structure-and-Interpretation-of-Computer-Programs"><a href="#Structure-and-Interpretation-of-Computer-Programs" class="headerlink" title="Structure and Interpretation of Computer Programs"></a>Structure and Interpretation of Computer Programs</h2><p>中文名叫『计算机程序的构造和解释』，目测应该是一本计算机科学的科普读物。</p>
<p><a href="http://item.jd.com/1092771266.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/StructureandInterpretationofComputerPrograms.jpg" alt="Structure and Interpretation of Computer Programs"></a></p>
<p>京东购买地址：</p>
<ol>
<li><a href="http://item.jd.com/1092771266.html" target="_blank" rel="external">计算机程序的构造和解释 英文版）</a></li>
<li><a href="http://item.jd.com/10057478.html" target="_blank" rel="external">计算机程序的构造和解释 原书第2版</a></li>
</ol>
<h2 id="Head-First-Design-Patterns"><a href="#Head-First-Design-Patterns" class="headerlink" title="Head First Design Patterns"></a>Head First Design Patterns</h2><p>看着封面的妹子就想读的一本书，中文名叫『Head Frirst 设计模式』。</p>
<p><a href="http://item.jd.com/1105635805.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/head_first_design_pattern.jpg" alt="Head First Design Patterns"></a></p>
<p>看上去最不像技术的编程书籍！</p>
<p>每个页面都包含涂鸦、图片以及其他一些吸引眼球的东西。</p>
<p>可能给人的印象是一本阅读起来很轻松的书，但事实上它会讨论编程的一些核心主题 —— 设计模式。</p>
<p>设计模式就是编程世界里的各种抽象的定理，而这本书有把它们画出来、具体化了的感觉。</p>
<p>畅销十年，累计印刷30余次，荣获2005年第十五届Jolt通用类图书震撼大奖！买买买！</p>
<ol>
<li><a href="http://item.jd.com/1105635805.html" target="_blank" rel="external">Head Frirst 设计模式 英文版）</a></li>
<li><a href="http://item.jd.com/10100236.html" target="_blank" rel="external">O’Reilly：Head First设计模式（中文版）</a></li>
</ol>
<h2 id="Introduction-to-Algorithms"><a href="#Introduction-to-Algorithms" class="headerlink" title="Introduction to Algorithms"></a>Introduction to Algorithms</h2><p>中文名叫『算法导论』，这是今天介绍的几本书里面唯一一本关于「算法」的。</p>
<p><a href="http://item.jd.com/1092771686.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/algorithm.jpg" alt="Introduction to Algorithms"></a></p>
<blockquote>
<p>超过50万人阅读的算法圣经！算法标准教材，国内外1000余所高校采用!</p>
</blockquote>
<p>京东购买地址：</p>
<ol>
<li><a href="http://item.jd.com/1092771686.html" target="_blank" rel="external">算法导论 英文版）</a></li>
<li><a href="http://item.jd.com/11144230.html" target="_blank" rel="external">算法导论（中文版）</a></li>
</ol>
<h2 id="The-Clean-Coder"><a href="#The-Clean-Coder" class="headerlink" title="The Clean Coder"></a>The Clean Coder</h2><p>最后一本是关于程序员职业素养的书，中文名为『程序员的职业素养』。</p>
<p><a href="http://item.jd.com/1098533768.html" target="_blank" rel="external"><img src="//misc.aotu.io/o2/img/books/the-clean-coder.jpg" alt="The Clean Coder"></a></p>
<p>该书探讨了一些程序员经常忽视的主题。</p>
<ul>
<li>成为专业的程序员意味着什么？</li>
<li>如何打磨自己成为一个真正的软件工匠？</li>
<li>冲突和紧张的日程处理</li>
<li>如何管理你的时间？如何扩张技能？</li>
<li>何时说“不”</li>
<li>避免倦怠</li>
<li>..以及更多。</li>
</ul>
<p>你可能并不总是同意作者的观点，但它提供了良好的精神食粮。这可能并非你所期望的，但可能正是你所需要的。</p>
<p>京东购买地址：</p>
<ol>
<li><a href="http://item.jd.com/1098533768.html" target="_blank" rel="external">程序员的职业素养 英文版）</a></li>
<li><a href="http://item.jd.com/11083858.html" target="_blank" rel="external">程序员的职业素养 中文版</a></li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read" target="_blank" rel="external">Stackoverflow: What is the single most influential book every programmer should read?</a></li>
<li><a href="https://blog.codinghorror.com/recommended-reading-for-developers/" target="_blank" rel="external">Recommended Reading for Developers</a></li>
<li><a href="https://jasonroell.com/2015/03/16/12-most-infuential-books-every-software-engineer-needs-to-read/" target="_blank" rel="external">12 Most Influential Books Every Software Engineer Needs to Read</a></li>
<li><a href="https://dzone.com/articles/must-read-book-list-for-programmers" target="_blank" rel="external">10 Classic Books Every Serious Developer Should Read</a></li>
<li><a href="http://developer.51cto.com/art/201602/506510.htm" target="_blank" rel="external">每个程序员应该阅读的10本经典书籍</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;7本对提升程序员编程思想、软件工程理论大有裨益的通用读物，不分专业，不分语言，不分排名先后。&lt;/p&gt;
&lt;h2 id=&quot;Code-Complete&quot;&gt;&lt;a href=&quot;#Code-Complete&quot; class=&quot;headerlink&quot; title=&quot;Code Complet
    
    </summary>
    
      <category term="资源合集" scheme="https://aotu.io/cates/%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/"/>
    
    
      <category term="读书清单" scheme="https://aotu.io/tags/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"/>
    
      <category term="程序开发" scheme="https://aotu.io/tags/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 实用配置技巧</title>
    <link href="https://aotu.io/notes/2016/11/14/webpack-tips/"/>
    <id>https://aotu.io/notes/2016/11/14/webpack-tips/</id>
    <published>2016-11-14T08:16:31.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Webpack做了什么</strong></p>
<p>一句话简单来解释就是处理模块依赖，并将它们合并成可用的静态资源。</p>
<p><strong>为什么选Webpack</strong></p>
<p>模块打包工具有很多，Webpack的特点是它依赖的模块可以是js文件，也可以是css文件，只要配置对应的webpack-loader(加载器)，.coffee、.sass、.jade等等任意的静态资源文件都可以被引用，并解析。</p>
<blockquote>
<p>例如：我在项目中使用Vue框架，在配置官方提供的loader后，就可以直接在js中依赖.vue后缀的单文件组件了。</p>
</blockquote>
<h3 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h3><p><strong>安装</strong></p>
<ol>
<li>使用npm init命令来创建一个package.json文件</li>
<li><p>安装Webpack，推荐只安装在当前项目中作为依赖</p>
<p> npm install webpack –save</p>
</li>
</ol>
<p><strong>添加一个配置文件 webpack.config.js</strong></p>
<pre><code>module.exports = {
    entry: &quot;./entry.js&quot;,
    output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: &quot;style!css&quot; }
        ]
    }
};
</code></pre><p><strong>执行webpack命令</strong></p>
<blockquote>
<p>如果全局安装了Webpack的话,那么直接在当前项目执行webpack命令就可以依赖上述webpack.config.js文件中的配置，分析entry.js中的依赖，打包输出bundle.js</p>
</blockquote>
<p>我使用npm scripts来启动任务，在package.json中添加：</p>
<pre><code>{
    ...
    &quot;scripts&quot;: {
        &quot;build&quot;: &quot;NODE_ENV=production webpack --watch&quot;
    }
    ...
}
</code></pre><p>执行npm run build。其中–watch参数表示持续的监听文件变化进行打包。</p>
<h3 id="入口文件配置"><a href="#入口文件配置" class="headerlink" title="入口文件配置"></a>入口文件配置</h3><p><strong>配置多个入口文件</strong></p>
<pre><code>module.exports = {
    entry: {
        entry1_bundle: &quot;./entry1.js&quot;,
        entry2_bundle: &quot;./entry2.js&quot;
    },
    output: {
        path: __dirname,
        filename: &quot;[name].js&quot;
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: &quot;style!css&quot; }
        ]
    }
};
</code></pre><p>在这个配置文件中有两个入口文件，输出的时候[name]会被替换为入口中配置的entry1_bundle和entry2_bundle</p>
<p><strong>使用glob方式配置</strong></p>
<pre><code>var path = require(&apos;path&apos;),
      glob = require(&apos;glob&apos;)  //需安装glob模块依赖

  function getEntries (globPath) {
  var files = glob.sync(globPath);
  var _entries = {}, entry, dirname, basename;

  for (var i = 0; i &lt; files.length; i++) {
      entry = files[i];
      dirname = path.dirname(entry);
      basename = path.basename(entry, &apos;.js&apos;);
      _entries[path.join(dirname, basename)] = &apos;./&apos; + entry;
  }
  return _entries;
  }
</code></pre><p>执行getEntries(‘*.js’)就会遍历到目录下全部的js文件做为入口文件配置。</p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>目前我有用到三个插件：CommonsChunkPlugin，UglifyJsPlugin，以及一个我自己定义的插件</p>
<pre><code>module.exports = {
    // plugins 字段传入一个数组，里面是实例化后的各种插件
    plugins: [new webpack.optimize.CommonsChunkPlugin({
          name: &apos;vendor&apos;,
          minChunks: 3
    }),
    new webpack.optimize.UglifyJsPlugin([options]),

    ...
    ],
    entry: {
        entry1_bundle: &quot;./entry1.js&quot;,
        entry2_bundle: &quot;./entry2.js&quot;
    },
    ...
};
</code></pre><p><strong>提取公用资源</strong></p>
<p>为了便于使用缓存，我通过CommonsChunkPlugin这个插件将公用部分提取出来。</p>
<p>上述配置会自动的将被3个及以上入口文件引用的资源提取出来到一个新的文件vendor.js中。我们通常不希望公用的内容发生不预知的变化，这样配置就可以将希望提取出来的内容显性的配置在config文件中：</p>
<pre><code>entry: {
  vendor: [&quot;vue&quot;, &quot;other-lib&quot;],
  ...
}
new CommonsChunkPlugin({
  name: &quot;vendor&quot;,
  // 将minChunks设置为无穷大，就不会有不期望的内容进入vendor了
  minChunks: Infinity,

})
</code></pre><p><strong>只在生产环境下启用UglifyJs插件</strong></p>
<pre><code>var plugins = [new webpack.optimize.CommonsChunkPlugin([options])]
// npm scripts 配置的参数可以用上了
if(process.env.NODE_ENV == &apos;production&apos;){
  plugins.push(new webpack.optimize.UglifyJsPlugin({
    compress: {
      warnings: false
    }
  }))
}
</code></pre><p>关于UglifyJs的使用就不介绍了，参考<a href="https://github.com/mishoo/UglifyJS2#usage" target="_blank" rel="external">UglifyJS2</a>。</p>
<p><strong>自定义插件</strong></p>
<p>Webpack提供的插件已足够使用，不过针对不同的业务，我们可能需要定制一些功能，例如我所定制的功能就是在编译资源的同时生成一份用于上传到服务器的md5版本号配置文件。</p>
<p>来一个简单的小栗子，如何开始写一个Webpack插件：</p>
<pre><code>var chunkCombo = function(){};
    chunkCombo.prototype.apply = function(compiler, callback){
  compiler.plugin(&quot;emit&quot;, function(compilation, callback){
      compilation.chunks.map(function(chunk, key){

        var filename = chunk.name + &apos;.shtml&apos;;
        var content = chunk.hash.slice(0,8);

        // 生成一个对应的新文件存储md5值
        compilation.assets[filename] = {
          source: function() {
              return content;
            },
            size: function() {
              return Buffer.byteLength(content, &apos;utf8&apos;) 
            }
        };
      })
      callback();
  });
    }
</code></pre><p>随着项目的深度定制和优化，我们可能需要开发更多的插件。</p>
<h3 id="配置loaders"><a href="#配置loaders" class="headerlink" title="配置loaders"></a>配置loaders</h3><p>有了无所不能的加载器，Webpack可以处理任何类型的静态文件</p>
<pre><code>module.exports = {
  entry: {
    entry1_bundle: &quot;./entry1.js&quot;,
    entry2_bundle: &quot;./entry2.js&quot;
  },
  output: {
      path: __dirname,
      filename: &quot;[name].js&quot;
  },
  module: {
      loaders: [
        { test: /\.vue$/, loader: &apos;vue-loader&apos; },
        { test: /\.css$/, loader: &apos;style-loader!css-loader&apos; },
        { test: /\.js$/, exclude: /node_modules/, loader: &quot;babel-loader&quot;},
        //加载器之间用！连接，-loader可以省略不写
        { test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;},
        { test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;}
      ]
  }
  };
</code></pre><p>加载器使用前记得先通过npm安装对应的模块，并将依赖添加到package.json文件中，例如：</p>
<pre><code>npm install vue-loader --save
</code></pre><ul>
<li>vue-loader用于解析.vue单文件组件。</li>
<li>有了babel-loader就可以直接使用新的语法特性了。Babel的配置参见<a href="http://babeljs.io/docs/setup/#installation" target="_blank" rel="external">Using Babel</a></li>
</ul>
<h3 id="使用webpack-dev-server"><a href="#使用webpack-dev-server" class="headerlink" title="使用webpack-dev-server"></a>使用webpack-dev-server</h3><p>webpack-dev-server是一个轻量的node.js Express服务，通过Socket.IO来实时的通知客户端Webpack编译状态。<br>安装webpack-dev-server模块，此处不再重复，直接看配置文件：</p>
<pre><code>module.exports = {
  entry: {
    entry1_bundle: &quot;./entry1.js&quot;,
    entry2_bundle: &quot;./entry2.js&quot;
  },
  output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
  ...
  devServer: {
      // serve 的根目录
    contentBase: _contentBase,
    port: 9000,
    // iframe模式和inline模式可选
    inline: true，
    ...
  }
  };
</code></pre><p>在package.json中添加：</p>
<pre><code>{
      ...
      &quot;scripts&quot;: {
        &quot;dev&quot;: &quot;NODE_ENV=dev webpack-dev-server&quot;
      }
      ...
}
</code></pre><p>执行npm run dev 命令后，服务就启动了。访问<a href="">http://localhost:9000</a>，就可以看到你的应用了。</p>
<p><strong>定制Express路由</strong></p>
<p>在inline模式下，需要手动的将用于更新的的脚本引入到页面中：</p>
<pre><code>module.exports = {
  entry: {
    entry1_bundle: &quot;./entry1.js&quot;,
    entry2_bundle: &quot;./entry2.js&quot;
  },
  output: {
        path: __dirname,
        filename: &quot;bundle.js&quot;
    },
  ...
  devServer: {
      // serve 的根目录
    contentBase: _contentBase,
    port: 9000,
    // iframe模式和inline模式可选
    inline: true,
    setup: function(app) {
      app.use(function(req, res, next) {
        //...
        return next();
      });
      app.get([&apos;*.shtml&apos;,&apos;*.html&apos;], function(req, res, next) {
        //...

        //将实时更新的脚本引入到页面中
        res.end(&apos;&lt;script src=&quot;http://localhost:9000/webpack-dev-server.js&quot;&gt;&lt;/script&gt;&apos;)
      })
    }
  }
  };
</code></pre><p>关于Express路由的使用，参考<a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="external">Express Routing</a></p>
<p>在我的项目中，我希望HTML页面在开发环境下和服务器环境下保持一致，因此我在devServer中配置了对HTML页面的解析。</p>
<p><strong>以上，希望我的Webpack项目配置能对你解决相关问题的时候有所帮助和启发。</strong></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://webpack.github.io/docs/" target="_blank" rel="external">Webpack docs</a></li>
<li><a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="external">Express Routing</a></li>
<li><a href="https://aotu.io/notes/2016/02/26/use-npm-script-instead-of-gulp/?utm_source=tuicool&amp;utm_medium=referral">使用npm scripts替代gulp</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Webpack做了什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一句话简单来解释就是处理模块依赖，并将它们合并成可用的静态资源。&lt;/
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Webpack" scheme="https://aotu.io/tags/Webpack/"/>
    
      <category term="模块打包工具" scheme="https://aotu.io/tags/%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Webpack 配置技巧" scheme="https://aotu.io/tags/Webpack-%E9%85%8D%E7%BD%AE%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>WeUI for 小程序 - 为微信小程序量身设计</title>
    <link href="https://aotu.io/notes/2016/11/10/weui-wxss/"/>
    <id>https://aotu.io/notes/2016/11/10/weui-wxss/</id>
    <published>2016-11-10T09:21:43.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>官人你没有走错地方，「WeUI」正式开始支持小程序啦，这是新鲜火辣的、微信官方设计团队为微信小程序量身设计的「WeUI-WXSS」。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://github.com/weui/weui" target="_blank" rel="external">WeUI</a> 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含<code>button</code>、<code>cell</code>、<code>dialog</code>、 <code>progress</code>、 <code>toast</code>、<code>article</code>、<code>actionsheet</code>、<code>icon</code>等各式元素。</p>
<h2 id="视觉标准"><a href="#视觉标准" class="headerlink" title="视觉标准"></a>视觉标准</h2><p><a href="https://github.com/weui/weui-design" target="_blank" rel="external">weui-design</a></p>
<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>用微信web开发者工具打开dist目录</p>
<p><a href="https://weui.io/" target="_blank"><br>    <img src="https://misc.aotu.io/o2/img/weui-demo.png" alt="preview"><br></a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>组件的wxml结构请看<code>dist/example/</code>下的组件</li>
<li>样式文件可直接引用<code>dist/style/weui.wxss</code>，或者单独引用<code>dist/style/widget</code>下的组件的<code>wxss</code></li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>The MIT License(<a href="http://opensource.org/licenses/MIT" target="_blank" rel="external">http://opensource.org/licenses/MIT</a>)</p>
<p>请自由地享受和参与开源</p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果你有好的意见或建议，欢迎给我们提<a href="https://github.com/weui/weui-wxss/issues" target="_blank" rel="external">issue</a>或pull request，为提升微信web体验贡献力量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官人你没有走错地方，「WeUI」正式开始支持小程序啦，这是新鲜火辣的、微信官方设计团队为微信小程序量身设计的「WeUI-WXSS」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;header
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="weui" scheme="https://aotu.io/tags/weui/"/>
    
      <category term="wsxx" scheme="https://aotu.io/tags/wsxx/"/>
    
      <category term="小程序" scheme="https://aotu.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>轻氧 - 2016年末最新款互联网专业资讯 APP</title>
    <link href="https://aotu.io/notes/2016/11/09/liteo2-app/"/>
    <id>https://aotu.io/notes/2016/11/09/liteo2-app/</id>
    <published>2016-11-09T06:21:43.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年的双11，大家都在割肾剁手<code>买买买</code>，我们凹凸实验室「阿尔法APP突击队」在抖腿<code>码码码</code>。<br>抬价而后打折促销的商家都TMD是<a href="https://movie.douban.com/subject/1438652/" target="_blank">《无耻的混蛋》<sup>昆丁.2009</sup></a>，而我们只做良心的促销：</p>
<h2 id="一款免费实用开源的APP"><a href="#一款免费实用开源的APP" class="headerlink" title="一款免费实用开源的APP"></a>一款免费实用开源的APP</h2><p><a href="//app.aotu.io">轻氧</a> 是 <a href="//aotu.io">凹凸实验室</a> 一不留神上架了的一款<strong>互联网技术资讯APP</strong>，它囊括了众多知名互联网公司、团队及网站的资讯，让你能一口气把业界最优质的文章读完，只要你愿意。</p>
<p>其实市面上互联网技术资讯这块领域已经有非常多优秀的产品了，例如<a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a>，又如后来居上者 <a href="http://gold.xitu.io/" target="_blank" rel="external">掘金</a>，类似产品之间的竞争异常剧烈，举步唯艰，再做一款类似内容的APP的意义到底有多少，而成功的概率又有多少？</p>
<p>我们曾经纠结过这些问题，但后来觉得这些纠结有点傻~ 做轻氧的『初心』本来就不是超越，而是在积累和探索。 </p>
<p>从业务的层面来看，是为团队积累和探索一款APP从零到设计到上架的整个流程，为下一次（如果有的话）APP研发需求做好流程和技术上的准备。 </p>
<p>从专业技术的层面来看，我们是在努力拓宽自己的专业范畴，要知道凹凸这个团队的前身是前端团队，相对匮乏原生应用开发经验，如果团队技术的努力方向是多终端技术体系，是全栈，那末轻氧APP则是印证我们朝这个方向发展、具备全栈开发综合能力的结果。</p>
<p>我们像是在练武，轻氧是我们自创的一门渐进式的武学，谁都无法断言它的厉害与否，因为主创们在不断的努力摸索和改进。</p>
<p>我们没有忘记O2的口号是：Open Oriented，所以「轻氧」年后将会开源，并配套一本总结整个APP项目从零到上架的书籍，记录着轻氧从无到有的套路和心法。希望能帮助到那些想了解和掌握Swift编程、Sketch设计、以及数据库架构及设计相关技能的同学们。</p>
<p>授之以鱼不如授之以渔，为「轻氧」存在的最大意义。</p>
<blockquote>
<p>源码届时将托管在<a href="https://github.com/o2team/app" target="_blank" rel="external">github.com/o2team/app</a>，欢迎抢先点赞订阅更新。</p>
</blockquote>
<h2 id="致潜在的用户"><a href="#致潜在的用户" class="headerlink" title="致潜在的用户"></a>致潜在的用户</h2><p>「轻氧」适合什么样的你呢？</p>
<p>如果你是辣么专情的：</p>
<p><strong>程序员、设计师、产品经理、运营、用研。</strong></p>
<p>但又不失滥情的闷骚：</p>
<p><strong>喜欢搞搞数码搞机、喜欢新鲜应用、脑袋发热准备创业。</strong></p>
<p><strong>那么，这款资讯 App 就是专门为你设计的。</strong></p>
<p>我们为互联网人士准备了多个专业资讯频道，将优质资讯分类呈现。</p>
<p>你可以根据需要选择你喜欢的频道来定制APP的内容。</p>
<p>目前已开通 <strong>11 个资讯频道</strong> （一些好玩的频道正在筹备中）：</p>
<p><img src="http://storage.360buyimg.com/mtd/home/artboard-copy1478671835326.png" width="700px"></p>
<p>总之，「轻氧」旨在帮你严肃地提升学术、视界的同时，也可以让你开个小差去猎奇酷玩，嘿嘿。</p>
<h2 id="丰富的资讯源"><a href="#丰富的资讯源" class="headerlink" title="丰富的资讯源"></a>丰富的资讯源</h2><p>关于APP的内容源，除了凹凸实验室原创资讯外，</p>
<p>我们精心选出了一些知名的 UED 和互联网站点，基于其简易信息聚合协议（RSS），将优质的互联网内容包装和分发，聚集到一个平台。</p>
<p>我们搬运但不盗窃，如果你喜欢，你仍然可以把「轻氧」当成是一款RSS订阅器，尽管我们不止于订阅辣么简单，后续我们APP做开源分享的时候再做深入介绍。</p>
<p>经过一段时间的耕耘，目前已有超过 <strong>4k 篇资讯</strong>，来自于 <strong>40+ 资讯来源</strong>：</p>
<p><img src="http://storage.360buyimg.com/mtd/home/origins_2-1-1478676025006.png" width="450px"></p>
<p>未来，我们还将在保证高质量文章的基础上，聚合更多的来源。</p>
<h2 id="看你喜欢看的"><a href="#看你喜欢看的" class="headerlink" title="看你喜欢看的"></a>看你喜欢看的</h2><p>就像其它资讯平台一样，「轻氧」的每篇文章也被打上了标签。<br>用户可以根据标签或者来源，能筛选出自己喜欢的内容，定制个性化的时间线。</p>
<p><img src="https://storage.360buyimg.com/mtd/home/21478279294465.jpeg" width="375px"></p>
<h2 id="技术驱动研发"><a href="#技术驱动研发" class="headerlink" title="技术驱动研发"></a>技术驱动研发</h2><p>与一般的资讯 APP 不同的是，这是一款「技术驱动」的APP，它的诞生源于「工科男」心底纯粹的技术欲望，尽管主创之一是兽医出身。</p>
<p>于是两三个技术工程师包揽了从产品构思、基于 Flinto 的原型交互、基于 Sketch 的视觉设计（除了LOGO为一个视觉美眉支持外）、基于 Swift3.x 的编码实现，当然还有 LeanCloud 数据服务的应用，Linux 服务器运维，以及应用上架部署的所有工作。</p>
<p>这肯定不是一款完美的产品，但我们在不停的迭代完善。</p>
<p>为了进一步提升APP的整体体验、提升我们工程师在跨专业领域的专业度，下一个大版本计划会邀请专业的交互设计师、视觉设计师参与进来。</p>
<h2 id="实验性的UI交互"><a href="#实验性的UI交互" class="headerlink" title="实验性的UI交互"></a>实验性的UI交互</h2><p>在「轻氧」APP里面，我们无所不能为，实验了一些我们YY觉得酷的体验，例如阅读进度记录、卡片频道。<br>尽管新奇不一定是最合适的，但还是期待能给使用「轻氧」的你带来不一样的资讯阅读体验。</p>
<p><img src="https://storage.360buyimg.com/mtd/home/11478278904373.jpeg" width="375px"></p>
<h2 id="尝鲜下载体验"><a href="#尝鲜下载体验" class="headerlink" title="尝鲜下载体验"></a>尝鲜下载体验</h2><blockquote>
<p>目前仅提供ios版本<br>基于 React Native 的 Android 版与网页版正在紧急开发中，敬请期待。</p>
</blockquote>
<p>官网地址：<br><a href="https://app.aotu.io" target="_blank">https://app.aotu.io</a></p>
<p>下载地址：<br><a href="https://jdc.jd.com/lab/redirect_app.html?ADTAG=o2.site.app" title="下载试用" class="btn btn-greyline btn-mobile-full" target="_blank" rel="external"><img src="http://storage.360buyimg.com/mtd/home/appstorelogo1478670585078.jpg" alt="下载试用「轻氧」" width="250px"></a></p>
<p>扫二维码：</p>
<p><a href="https://jdc.jd.com/lab/redirect_app.html?ADTAG=o2.site.app" title="轻氧二维码" class="btn btn-greyline btn-mobile-full" target="_blank" rel="external"><img src="https://misc.aotu.io/o2/img/app/qrcode.png" alt="轻氧二维码" width="250px"></a></p>
<p>问题反馈：</p>
<ul>
<li>「凹凸实验室」公众号 (AOTULabs)</li>
<li>APP 个人中心 -&gt; 设置 -&gt; 意见反馈 </li>
</ul>
<p>希望在这个信息爆炸的时代，「轻氧」能够帮助你<strong>聚焦更优质的资讯内容</strong>。<br>也让你更加专注于用心被创造出来的文章，和其创造者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是一年的双11，大家都在割肾剁手&lt;code&gt;买买买&lt;/code&gt;，我们凹凸实验室「阿尔法APP突击队」在抖腿&lt;code&gt;码码码&lt;/code&gt;。&lt;br&gt;抬价而后打折促销的商家都TMD是&lt;a href=&quot;https://movie.douban.com/subject/143
    
    </summary>
    
      <category term="移动开发" scheme="https://aotu.io/cates/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="liteo2" scheme="https://aotu.io/tags/liteo2/"/>
    
      <category term="app" scheme="https://aotu.io/tags/app/"/>
    
      <category term="ios" scheme="https://aotu.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>我的第一次移动端页面制作 — 总结与思考</title>
    <link href="https://aotu.io/notes/2016/11/08/first-mobile-rebuild/"/>
    <id>https://aotu.io/notes/2016/11/08/first-mobile-rebuild/</id>
    <published>2016-11-08T08:22:23.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>最近被分配到移动端开发组，支持某活动的页面页面制作。这算是我第一次真正接触移动端页面制作，下面就谈谈个人总结和思考。</p>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>开会大体讲解、讨论与排期 -&gt; 交互设计 -&gt; 视觉设计 -&gt; 页面页面制作 -&gt; 前端开发 -&gt; 测试</p>
<p>每个步骤环环相扣，每个职位都需要和其前后的人沟通协调。</p>
<p>测试遇到问题则会反馈到相应环节负责人。</p>
<p>当然，涉及的职位也不仅于此，还有法务同事审核内容是否符合当前法规等等。</p>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><h3 id="Athena"><a href="#Athena" class="headerlink" title="Athena"></a>Athena</h3><p>前端开发离不开构建工具，除了敲代码，其余都交给构建工具（如组件开发、CSS 兼容处理、图片 Base64、图片雪碧图和压缩处理等）。<br>在 <a href="https://athena.aotu.io/" target="_blank" rel="external">Athena</a> 中，文件层级结构如下：项目 project -&gt; 模块 module（具体每个活动） -&gt; 页面 page -&gt; 部件 widget。  </p>
<p>举例： 某项目 -&gt; X、Y 活动 -&gt; 预热页和高潮页 -&gt; 头部、弹框等 widget。一般文件目录如下：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Xproject</div><div class="line">    -<span class="ruby"> gb (公共部分，如初始化样式和一些常用 widget)</span></div><div class="line">    -<span class="ruby"> X活动</span></div><div class="line">        -<span class="ruby"> page</span></div><div class="line">            -<span class="ruby"> 预热页</span></div><div class="line">            -<span class="ruby"> 高潮页</span></div><div class="line">        -<span class="ruby"> widget</span></div><div class="line">            -<span class="ruby"> header</span></div><div class="line">            -<span class="ruby"> footer</span></div><div class="line">            -<span class="ruby"> diglog</span></div><div class="line">    -<span class="ruby"> Y 活动</span></div><div class="line">    -<span class="ruby"> ...</span></div></pre></td></tr></table></figure></p>
<p>刚开始接触时，存在这样的一个疑惑：什么是 widget，一个不可复用的页面头部可以作为 widget 吗？<br>答：我最初的想法是：“错误地把 widget 当成 component，component 一直被强调的 特性之一是<strong>可复用性</strong>。对于不可复用的部分就不应该抽出为一个widget了？”<strong>其实对于一个相对独立的功能，我们就可把它抽出来。</strong>这无疑会增强程序的可维护性。 </p>
<p>对于一个项目，一般一个模块由一个人负责。但考虑到每个模块间可能存在（或未来存在）可复用的 widget，需要规范命名以形成命名空间，防止冲突（具体会在下面的规范-命名中阐述）。</p>
<blockquote>
<p>Component 与 Widget 的区别<br>Component 是更加广义抽象的概念，而Widget是更加具体现实的概念。所以Component的范围要比Widget大得多，通常 Component 是由多个 Widget 组成。<br>举个例子，可能不是很恰当，希望帮助你的理解，比如家是由床，柜子等多个 Component 组成，柜子是由多个抽屉 Widget 组成的。<br>而 Component 和 Widget 的目的都是为了模块化开发。</p>
</blockquote>
<p>其实，在这里并没有对 widget 和 component 做这么细的区分。</p>
<h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p>正如上面讨论的，一个页面由多个 widget 组成。因此，一个页面看起来如下：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ontouchstart</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 主会场头部 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_main_header"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 主会场头部 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 达人问答区 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_answer"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 达人问答区 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 优惠券 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_coupons"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 优惠券 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 达人集中营 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_camp"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 达人集中营 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 达人穿搭公式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_collocation"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 达人穿搭公式 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- S 卡券相关弹框 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> widget.load(<span class="string">"app_market_dialog"</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- E 卡券相关弹框 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>widget 一般存在可复用性。但如何控制细粒度呢？分得越细代码就越简洁，但工作量和维护难度可能会上升，因此需要权衡你当时的情况。</p>
<h3 id="CSS-命名"><a href="#CSS-命名" class="headerlink" title="CSS 命名"></a>CSS 命名</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>由于一个项目中，一个模块由某一个人负责，但模块之间的 widget 存在或未来存在可复用的可能（而且开发可能会为你的页面添加已有的组件，如页面会嵌在某 APP 内，该 APP 已有现成的一些提示框）。因此，需要命名空间将其它们进行区分以防止冲突。由于 CSS 不存在命名空间，因此只能通过类似 BEM 的方式（具体根据团队的规范），如：<code>app_market_header</code>、<code>app_market_list_item</code>。<code>app_market</code> 是模块（即某个活动）的标识，在该项目下，它是唯一的。</p>
<p>另外，还有一点：类名是否要按照 html 层级关系层层添加呢？如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.app_market_header</span></div><div class="line">    <span class="selector-tag">div</span><span class="selector-class">.app_market_header_icon</span></div><div class="line">    <span class="selector-tag">div</span>.app_market_header_**</div></pre></td></tr></table></figure></p>
<p>对于 <code>app_market_header_icon</code>，尽管在 header 中，但 icon 并不只属于 header，而属于整个模块（活动），那么我们就可以改为 <code>app_market_icon</code>。</p>
<h4 id="命名存在的问题"><a href="#命名存在的问题" class="headerlink" title="命名存在的问题"></a>命名存在的问题</h4><p>老司机 Code review 后，讲了以下内容：<br>反面教材：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_secheader"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_list"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_item"</span>&gt;</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_item_top"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_item_middle"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">      &lt;a href=<span class="string">"javascript:;"</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_item_bottom"</span>&gt;去围观&lt;/a&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>存在的问题是：嵌套层级越深，类名就越长。</p>
<p>较好的解决方案：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_secheader"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_list"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_item"</span>&gt;</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_itop"</span>&gt;&lt;/<span class="keyword">div</span>&gt;***</div><div class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_imid"</span>&gt;&lt;/<span class="keyword">div</span>&gt;***</div><div class="line">      &lt;a href=<span class="string">"javascript:;"</span> <span class="built_in">class</span>=<span class="string">"app_market_answer_ibtm"</span>&gt;去围观&lt;/a&gt;***</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>这是基于『姓名』原理进行优化的，举例：<code>app_market_answer_item</code> 是姓名（库日天），那么它的子元素只需继承它的『姓』（库姆斯） <code>app_market_answer_itop</code>，而不是它的姓名（库日天姆斯） <code>app_market_answer_item_top</code>。每当类名达到三到四个单词长时，就要考虑简化名字。</p>
<p>进一步优化，app_market 可以看成是『复姓』，有时为了书写便利，可以以两个单词的首字母结合形成一个新的『新姓』- 『am』。当然，追求便利的副作用是牺牲了代码的可读性。如果你负责的项目或页面没有太大的二次维护或者交叉维护的可能性，推荐做此简化。</p>
<p>BTW：此简化后的『姓』可以在代码中稍加注释说明，如下代码所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- am = app_market --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_answer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_secheader"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_answer_list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_answer_item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_answer_itop"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am_answer_imid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"am_answer_ibtm"</span>&gt;</span>去围观<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="针对类名书写样式"><a href="#针对类名书写样式" class="headerlink" title="针对类名书写样式"></a>针对类名书写样式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>至少加一个类名，任何时候都尽量要『针对类名书写样式，而不是针对元素书写样式』，除非你能预判元素是末级元素。<br>因此对于以下 CSS：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.app_market_coupons</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可优化成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.app_market_coupons</span> &gt; <span class="selector-class">.xxx</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="技术涉及"><a href="#技术涉及" class="headerlink" title="技术涉及"></a>技术涉及</h2><h3 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h3><p>移动端采用 rem 布局方式。通过动态修改 html 的 font-size 实现自适应。</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>REM 布局有两种实现方式：CSS 媒介查询和 JavaScript 动态修改。由于 JavaScript 更为灵活，因此现在更多地采用此方式。</p>
<h5 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h5><p>凹凸的实现方式是：在 <code>head</code> 标签末加入以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    !<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> maxWidth=<span class="number">750</span>;</div><div class="line">      <span class="built_in">document</span>.write(<span class="string">'&lt;style id="o2HtmlFontSize"&gt;&lt;/style&gt;'</span>);</div><div class="line">      <span class="keyword">var</span> o2_resize=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">var</span> cw,ch;</div><div class="line">          <span class="keyword">if</span>(<span class="built_in">document</span>&amp;&amp;<span class="built_in">document</span>.documentElement)&#123;</div><div class="line">              cw=<span class="built_in">document</span>.documentElement.clientWidth,ch=<span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span>(!cw||!ch)&#123;</div><div class="line">              <span class="keyword">if</span>(<span class="built_in">window</span>.localStorage[<span class="string">"o2-cw"</span>]&amp;&amp;<span class="built_in">window</span>.localStorage[<span class="string">"o2-ch"</span>])&#123;</div><div class="line">                  cw=<span class="built_in">parseInt</span>(<span class="built_in">window</span>.localStorage[<span class="string">"o2-cw"</span>]),ch=<span class="built_in">parseInt</span>(<span class="built_in">window</span>.localStorage[<span class="string">"o2-ch"</span>]);</div><div class="line">              &#125;<span class="keyword">else</span>&#123;</div><div class="line">                  chk_cw();<span class="comment">//定时检查</span></div><div class="line">                  <span class="keyword">return</span> ;<span class="comment">//出错了</span></div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">var</span> zoom=maxWidth&amp;&amp;maxWidth&lt;cw?maxWidth/<span class="number">375</span>:cw/<span class="number">375</span>,zoomY=ch/<span class="number">603</span>;<span class="comment">//由ip6 weChat</span></div><div class="line">          <span class="built_in">window</span>.localStorage[<span class="string">"o2-cw"</span>]=cw,<span class="built_in">window</span>.localStorage[<span class="string">"o2-ch"</span>]=ch;</div><div class="line">          <span class="comment">//zoom=Math.min(zoom,zoomY);//保证ip6 wechat的显示比率</span></div><div class="line">          <span class="built_in">window</span>.zoom=<span class="built_in">window</span>.o2Zoom=zoom;</div><div class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"o2HtmlFontSize"</span>).innerHTML=<span class="string">'html&#123;font-size:'</span>+(zoom*<span class="number">20</span>)+<span class="string">'px;&#125;.o2-zoom,.zoom&#123;zoom:'</span>+(zoom/<span class="number">2</span>)+<span class="string">';&#125;.o2-scale&#123;-webkit-transform: scale('</span>+zoom/<span class="number">2</span>+<span class="string">'); transform: scale('</span>+zoom/<span class="number">2</span>+<span class="string">');&#125; .sq_sns_pic_item,.sq_sns_picmod_erea_img&#123;-webkit-transform-origin: 0 0;transform-origin: 0 0;-webkit-transform: scale('</span>+zoom/<span class="number">2</span>+<span class="string">');transform: scale('</span>+zoom/<span class="number">2</span>+<span class="string">');&#125;'</span>;</div><div class="line">      &#125;,</div><div class="line">      siv,</div><div class="line">      chk_cw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(siv)<span class="keyword">return</span> ;<span class="comment">//已经存在</span></div><div class="line">          siv=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">              <span class="comment">//定时检查</span></div><div class="line">              <span class="built_in">document</span>&amp;&amp;<span class="built_in">document</span>.documentElement&amp;&amp;<span class="built_in">document</span>.documentElement.clientWidth&amp;&amp;<span class="built_in">document</span>.documentElement.clientHeight&amp;&amp;(o2_resize(),clearInterval(siv),siv=<span class="literal">undefined</span>);</div><div class="line">          &#125;,<span class="number">100</span>);</div><div class="line">      &#125;;</div><div class="line">      o2_resize();<span class="comment">//立即初始化</span></div><div class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,o2_resize);</div><div class="line">  &#125;();</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>从以上代码可得出以下信息：  </p>
<ol>
<li>以 iPhone 6 为基准，iPhone 6 的缩放比 <code>zoom</code> 为 <code>1</code></li>
<li>由于只针对移动端，因此最大宽度为768（恰好等于 iPad 的竖屏宽度）</li>
<li>通过 document.documentElement.clientWidth 获取视口宽度</li>
<li>resize 事件主要考虑横竖屏切换和你在PC上调试时🙃</li>
<li>zoom 系数是 20。系数决定了在宽度 375 的 iPhone6 下，1 rem 的值是多少 px（20px）。当然如果想过渡到 vw，可以将 zoom 系数设置为 3.75，那么 100rem 就是 375px 了</li>
</ol>
<h4 id="为什么要用"><a href="#为什么要用" class="headerlink" title="为什么要用"></a>为什么要用</h4><p>有人说 rem 布局是 <code>vw</code> 和 <code>vh</code> 的替换方案，当 <code>vw</code> 和 <code>vh</code> 成熟时，两者可能会各司其职吧。</p>
<blockquote>
<p><a href="http://caniuse.com/#search=vw" target="_blank" rel="external">vw 的兼容性</a>：在安卓 4.3 及以下是不支持的。</p>
</blockquote>
<h5 id="哪些地方要用"><a href="#哪些地方要用" class="headerlink" title="哪些地方要用"></a>哪些地方要用</h5><p>由于 rem 布局是相对于视口宽度，因此任何需要根据屏幕大小进行变化的元素（width、height、position 等）都可以用 rem 单位。</p>
<p>但 rem 也有它的缺点——不精细（在下一节阐述），其实这涉及到了浏览器渲染引擎的处理。因此，对于需要精细处理的地方（如通过 CSS 实现的 icon），可以用 px 等绝对单位，然后再通过 transform: scale() 方法等比缩放。</p>
<h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><p>那 <code>font-size</code> 是否也要用 rem 单位呢？ 这也是我曾经纠结的地方。如果不等比缩放，对不起设计师，而且对于小屏幕，一些元素内的字体会换行或溢出。当然这可以通过 CSS3 媒介查询解决这种状况。</p>
<p>字体不采用 rem 的好处是：在大屏手机下，能显示更多字体。</p>
<p>看到 <a href="http://3g.163.com/" target="_blank" rel="external">网易新闻</a> 和 <a href="https://jhs.m.taobao.com/m/index.htm#!all" target="_blank" rel="external">聚划算</a> 的字体大小都采用 rem 单位，我就不纠结了。当然，也有其它网站是采用绝对单位的，两者没有绝对的对与错，取决于你的实际情况。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h5 id="小数点（不精细，有间隙）"><a href="#小数点（不精细，有间隙）" class="headerlink" title="小数点（不精细，有间隙）"></a>小数点（不精细，有间隙）</h5><p>由于 rem 布局是基于某一设备实现的（目前一般采用 iPhone6），对于 375 倍数宽的设备无疑会拥有最佳的显示效果。而对于非 375 倍数宽的设备，zoom 就可能是拥有除不尽的小数，根元素的字体大小也相应会有小数。而浏览器对小数的处理方式不一致，导致该居中的地方没完全居中，但你又不能为此设置特定样式（如 margin-top: *px;），因为浏览器多如牛毛，这个浏览器微调居中了，而原本居中的浏览器变得不居中了。</p>
<p>对于图标 icon，rem 的不精细导致通过多个元素（伪元素）组合而成的 icon 会形成错位/偏差。因此，在这种情况下，需要权衡是否需要使用 CSS 实现了。</p>
<h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><p>SASS 无疑增强了原本声明式的 CSS，为 CSS 注入了可编程等能力。在这次项目，算是我第一次使用 SASS，由于构建工具和基础库的完善，只需通过查看/模仿已有项目的 SASS 用法，就能快速上手。后续还是要系统地学习，以更合理地使用 SASS。</p>
<p>使用 SASS 的最大问题是：层级嵌套过深，这也是对 SASS 理解不深入的原因。可以关注一下转译后的 CSS。</p>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>这次项目的 APP 采用手机自带浏览器内核，而这些浏览器内核依赖于系统版本等因素。另外，国产机也会对这些内核进行定制和修改。特别是华为、OPPO。</p>
<p>下面列出我所遇到的兼容性问题（不列具体机型，因为这些兼容性处理终会过时，不必死记硬背，遇到了能解决就好（要求基础扎实））：</p>
<ul>
<li>flexbox：在构建工具处理下（实现了新旧语法）可以大胆用，但个别设备不支持 flex-wrap: wrap。因此对于想使用 flex-wrap 实现自动分行的情况，建议使用其他实现。如果个数固定（如 N  行，每行 M 个），则可使用 N 个 flexbox（这样就可以使用 flexbox 的特性了）。flexbox 的其他属性也有支持不好的情况，可以通过显式声明 display、overflow、width、height 等方法解决。</li>
<li>background-size：需要单独写，否则在 <a href="http://caniuse.com/#search=background-size" target="_blank" rel="external">安卓 4.3 及以下，IOS 6.1及以下不兼容</a>。</li>
<li>渐变：线性渐变大胆使用，径向渐变有兼容性问题。但是不建议对整体背景使用，会有性能问题（可简单地通过 1px 高的图片替代，注意，不要 background-size: 100% auto; 应该采用 background-size: 100% 1px; 因为有些浏览器（视口宽度较小）会忽略小数点【<code>auto = img.Height * (screen.Width/img.Width)</code>】，导致图片未显示）。另外，需要注意的是：透明的色标在iOS 默认是黑色的，即 transparent 等于 rgba(0,0,0,0)。因此即使是完全透明的色标，也要指定颜色。否则后果如下：<br><img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/linear-gradient.jpg" alt="此处输入图片的描述"></li>
<li>classlist.remove(String[, String])，传递多个参数时，会有不兼容的情况。建议每次写一个。add (String[, String])同理。</li>
<li><p>根节点 html font-size 渲染错误：在华为、魅族的某设备上（手Q），会出现一个非常奇葩的渲染 Bug，同一个网页，“扫一扫”打开 html 的 font-size 正常，直接点击链接会出现<strong>渲染出来的 html font-size 会比设置得值大</strong>（如：设置25.8，渲染出来是 29），因此导致整体变大，且布局错乱。<br>我的方法是：为 html font-size 重新设置大小：渲染字体大小 - (渲染与正常差值)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">ele, style</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.defaultView.getComputedStyle(ele, <span class="literal">null</span>)[style]</div><div class="line">&#125;</div><div class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">fixFontSize</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> target = <span class="built_in">window</span>.o2Zoom * <span class="number">20</span></div><div class="line">    <span class="keyword">var</span> cur = <span class="built_in">parseInt</span>(getStyle(<span class="built_in">document</span>.documentElement, <span class="string">"fontSize"</span>))</div><div class="line">    <span class="keyword">while</span>(cur - target &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">document</span>.documentElement.style[<span class="string">"fontSize"</span>] = target - (cur - target) + <span class="string">"px"</span></div><div class="line">        cur = <span class="built_in">parseInt</span>(getStyle(<span class="built_in">document</span>.documentElement, <span class="string">"fontSize"</span>))</div><div class="line">    &#125;          </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>有网友提供这个方法 <code>&lt;meta name=&quot;wap-font-scale&quot; content=&quot;no&quot;&gt;</code>，经测试不可行。此方法是针对 UC 浏览器的。</p>
<p>上面主要列出了对使用有影响的兼容性问题，有些由于浏览器渲染引擎导致的问题（不影响使用），若无法通过 transform、z-index 等解决，也许只能通过 JavaScript 解决或进行取舍了。</p>
<h3 id="其他一些知识点"><a href="#其他一些知识点" class="headerlink" title="其他一些知识点"></a>其他一些知识点</h3><ul>
<li><p>图片占位元素：对于宽高比例固定的坑位（如商品列表项），通过将图片放置在占位元素中，可避免图片加载时引起的页面抖动和图片尺寸不一致而导致的页面布局错乱。代码实现：</p>
<pre><code>.img_placeholder {
  position: relative;
  height: 0;
  overflow: hidden;
  padding-top: placeholder 的高/宽%; // padding-top/bottom: 百分比; 是基于父元素的宽度
  img {
      width: 100%;
      height: auto;
      position: absolute;
      left: 0;
      top: 0;
  }
}
</code></pre></li>
<li><p>1px：在 retina 屏幕下，1 CSS像素是用 4 个物理像素表示，为了在该屏幕下显示更精细，通过为 ::after 应用以下代码（以上边框为例）：</p>
<pre><code>div {
    position: relative;
    &amp;::after {
        content: &apos;&apos;;
        position: absolute;
        z-index: 1;
        pointer-events: none;
        background: $borderColor;
        height: 1px;left: 0;right: 0;top: 0;
        @media only screen and (-webkit-min-device-pixel-ratio:2) {
            &amp;{
                -webkit-transform: scaleY(0.5);
                -webkit-transform-origin: 50% 0%;
            }
        }
    }
}
</code></pre></li>
<li><p>根据元素个数应用特定样式：</p>
<pre><code>/* one item */
li:first-child:nth-last-child(1) {
    width: 100%;
}
/* two items */
li:first-child:nth-last-child(2),
li:first-child:nth-last-child(2) ~ li {
    width: 50%;
}
/* three items */
li:first-child:nth-last-child(3),
li:first-child:nth-last-child(3) ~ li {
    width: 33.3333%;
}
/* four items */
li:first-child:nth-last-child(4),
li:first-child:nth-last-child(4) ~ li {
    width: 25%;
}
</code></pre><p>  应用样例有：根据元素个数自适应标签样式。<br>  <img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/tag1.png" alt="根据元素个数自适应标签样式"><br>  而对于反方向标签，可先首先对整体 transform: scale(-1)，然后再对字体 transform: scale(-1) 恢复从左向右的方向。效果如下：<br><img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/tag2.png" alt="标签反向">  </p>
</li>
<li>卡券：『带孔且背景是渐变的卡券』在复杂背景中的实现。由于背景是复杂的（非纯色），因此孔不能简单地通过覆盖（与背景同色）产生。这里可以应用径向渐变 <code>background-image: radial-gradient(rem(189/2) 100%, circle, transparent 0, transparent 3px, #fa2c66 3px);</code>，其中 3px 是孔的半径。另外，卡券的上下部分是线性渐变的，因此可以在上下部分分别通过伪类元素添加 <code>background-image: linear-gradient(to top, #fa2e67 0, #fb5584 100%);</code>，当然，要从离外上/下边界 3px 的地方开始。虽然这不能完美地从最边界开始，但效果还是可以的。但由于径向渐变的兼容性问题，我最终还是用图片替换了这种实现。🙄<br><img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/coupon.png" alt="带孔且背景是渐变的卡券">  </li>
<li>多行文本的多行padding：让背景只出现在有文字的地方，可直接设置 <code>display: inline;</code>，但还会存在一个问题是：padding 只会出现在多行文本的首和尾，对于需要为每行文本的首尾都需要相同的 padding，可以参考这篇文章：<a href="https://css-tricks.com/multi-line-padded-text/" target="_blank" rel="external">《multi-line-padded-text》</a> 。该文章提供了多种实现方式，根据具体情况选择一种即可。另外，对于每行的间距，可通过设置 line-height 和 padding-top/bottom 实现，其中 line-height 要大于（字体高度+padding-top/bottom）。<br><img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/multi-line1.png" alt="此处输入图片的描述"><br><img src="//misc.aotu.io/JChehe/2016-11-08-first-mobile-rebuild/multi-line2.png" alt="此处输入图片的描述">  </li>
<li>最小字体限制：PC上最小字体是 12px、移动端最小是 8px，当然可通过 transform:scale() 突破限制。</li>
</ul>
<h3 id="不止页面页面制作"><a href="#不止页面页面制作" class="headerlink" title="不止页面页面制作"></a>不止页面页面制作</h3><ol>
<li>基础：合理运用 CSS 的威力更好地完成对设计稿的重现目的。  </li>
<li>沟通：由于分工较细，只负责页面制作的同学，需要与产品和设计沟通，以达到交给开发后更少修改的目的。如哪些地方可跳转、哪些地方最多显示几行文字、超出如何处理（直接隐藏/省略号等）、坑位中的图片摆放（顶部对齐/居中等）等等。  </li>
<li>代码上的沟通：HTML 注释要写好、HTML 与 CSS 代码要规范（命名等）清晰。  </li>
</ol>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>由于工具的成熟，我不需要考虑构建工具的搭建。<br>由于发布方式的成熟，页面制作和开发能更好地分离，页面制作者负责输出 HTML、CSS，开发负责 copy html 代码和引入 CSS 页面片。CSS 页面片由页面制作者更新发布，开发无需关心。这达到了互不干扰、多线程并行的效果。<br>成熟的基础设施让我们免除了非代码相关的烦恼，但这也让我担心：假如有一天我脱离了这些基础设施，我该如何保持高效。</p>
<h4 id="延伸：页面片是什么？"><a href="#延伸：页面片是什么？" class="headerlink" title="延伸：页面片是什么？"></a>延伸：页面片是什么？</h4><p>CSS 页面片<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- #include virtual="/folder/branch.shtml" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">combofile</span>=<span class="string">"/folder/branch.shtml"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//website/folder/gb.min_1151b5b0.css,/folder/branch.min_925332fc.css"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>JS 页面片<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- #include virtual="/folder/branch_js.shtml" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">combofile</span>=<span class="string">"/folder/branch.shtml"</span> <span class="attr">src</span>=<span class="string">"//website/path/branch.min_8971778a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Combo Handler是Yahoo!开发的一个Apache模块，它实现了开发人员简单方便地通过URL来合并JavaScript和CSS文件，从而大大减少文件请求数。 <a href="http://www.cnblogs.com/zhengyun_ustc/archive/2012/07/18/combo.html" target="_blank" rel="external">http://www.cnblogs.com/zhengyun_ustc/archive/2012/07/18/combo.html</a></p>
</blockquote>
<hr>
<p>这就是我的第一次…🙈 学习很多，完！</p>
<p>以上仅是我个人完成某项目页面制作的思考和总结，不小心暴露了团队下限。🌚</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最近被分配到移动端开发组，支持某活动的页面页面制作。这算是我第一次真正接触移动端页面制作，下面就谈谈个人总结和思考。&lt;/p&gt;
&lt;h2 id=&quot;整体流程&quot;&gt;&lt;a href=&quot;#整体流程&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="项目总结" scheme="https://aotu.io/cates/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="html" scheme="https://aotu.io/tags/html/"/>
    
      <category term="css" scheme="https://aotu.io/tags/css/"/>
    
      <category term="mobile rebuild" scheme="https://aotu.io/tags/mobile-rebuild/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 WebVR</title>
    <link href="https://aotu.io/notes/2016/08/24/2016-8-24-webvr/"/>
    <id>https://aotu.io/notes/2016/08/24/2016-8-24-webvr/</id>
    <published>2016-08-24T12:00:00.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“目镜在他眼前涂上了一抹朦胧的淡色，映射着一幅弯曲的广角画面：一条灯火辉煌的大街，伸向无尽的黑暗。但这大街其实并不存在，它只是电脑绘出的一片虚拟的空间。”——《Snow Crash》，Neal Stephenson 1992年</p>
</blockquote>
<h2 id="什么是-VR"><a href="#什么是-VR" class="headerlink" title="什么是 VR"></a>什么是 VR</h2><p>VR（Virtual Reality）是利用电脑模拟产生一个三维空间的虚拟世界，提供用户关于视觉等感官的模拟，让用户感觉仿佛身历其境，可以及时、没有限制地观察三维空间内的事物。用户进行位置移动时，电脑可以立即进行复杂的运算，将精确的三维世界视频传回产生临场感。—— 维基百科</p>
<h3 id="VR-的显示原理"><a href="#VR-的显示原理" class="headerlink" title="VR 的显示原理"></a>VR 的显示原理</h3><p>了解 VR 显示原理前，先了解我们人眼的立体视觉的成像原理：  </p>
<p>人眼的视觉是可以感觉出深度的，也就是<strong>深度知觉（depth perception）</strong>。而有了深度的信息后，才能判断出立体空间的相对位置。</p>
<p>另外，由于两个眼睛的位置不一样（一般人两眼相距 5~7 厘米），所以看到的东西会有<strong>两眼视差（binocular parallax）</strong>，大脑再将这两个图像做融合处理，从而产生立体的感觉（即所谓的 binocular cues）。</p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/vision.png" alt="立体视觉"><br>立体视觉</p>
<h3 id="头戴式显示器（Head-mounted-Display）"><a href="#头戴式显示器（Head-mounted-Display）" class="headerlink" title="头戴式显示器（Head-mounted Display）"></a>头戴式显示器（Head-mounted Display）</h3><p>头戴式显示器（HMD）是 VR 目前最常见的一种体验方式。它的原理是将小型二维显示器所产生的图像经由光学系统放大。具体而言，小型显示器所发射的光线经过凸状透镜使图像因折射产生类似远方效果。利用此效果将近处物体放大至远处观赏，从而达到所谓的全息视觉（Hologram）。另外，显示器被分为左右两个部分，分别显示左右眼看到的图像。大脑再将左右眼所看到的图像（两眼视差）做融合处理，从而产生 3D 效果。同时，HMD  会根据头部运动让视角与之同步。综合上述特性，用户通过 HMD 体验 VR 时就如同在现实中观看一样，这种体验也被称为沉浸式体验。</p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/HMD.jpg" alt="此处输入图片的描述"><br>HMD 原理示意图</p>
<h4 id="HMD-种类"><a href="#HMD-种类" class="headerlink" title="HMD 种类"></a>HMD 种类</h4><p>目前市场上主要有以下 3 种 HMD 设备：</p>
<ul>
<li>滑配式<br> 这是目前最初级、价格最低的 HMD 设备。它与智能手机相连接，将 2D 显示变成 3D VR 显示。滑配式 HMD 设备强烈依赖于主机系统（智能手机），后者是提供 VR 效果的必备部分。<br> 厂商：滑配式 HMD 设备包括谷歌 Carboard 和三星 Gear VR。</li>
<li>分离式<br>分离式 HMD 设备较滑配式 HMD 设备复杂，内置多种电子零部件。两者的主要不同是，分离式 HMD  设备拥有自己的显示屏，也可能配备自己的处理器（提供简单计算能力）。虽然分离式 HMD 设备不能独立于主机系统而工作，但却为 VR 市场创造了新的机会，因为主机系统已不再局限于智能手机，PC 和视频游戏机也能用于提供 VR 体验。总之，分离式 HMD 设备能提供高质量的 VR 体验。<br> 厂商：分离式 HMD 设备包括 Facebook Oculus Rift、HTC Vive 和 PlayStation VR。</li>
<li>整合式<br>整合式 HMD 设备拥有强大的计算能力和追踪系统。作为一款独立的计算设备，整合式 HMD 设备将配备一整套零部件，价格甚至高于普通 PC。<br> 厂商：微软 HoloLens（AR）</li>
</ul>
<p>对于想初步体验或入门 VR 的用户，推荐谷歌的 Carboard 或国内的性价比高的滑配式设备。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/google-cardboard.jpg" alt="此处输入图片的描述"><br>Google Carboard</p>
<h3 id="VR-周边设备"><a href="#VR-周边设备" class="headerlink" title="VR 周边设备"></a>VR 周边设备</h3><p>VR 是最具科幻色彩以及梦幻体验的东西，单独一个 HMD 并不能发挥 VR 的最大效果，加上“属性加成”的周边才能体验极致的 VR。</p>
<p>2015 年，澳大利亚开设了世界首家 VR 沉浸式竞技游戏店—— <a href="https://www.zerolatencyvr.com/" target="_blank" rel="external">Zero Latency</a>。 这家店拥有 4300 平方英尺，安装有 129 台 PlayStation Eye 摄像头，用于捕捉玩家的动作。整套系统可以最多同时供 6 名玩家进行游戏。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/Zero%20Latency.jpg" alt="此处输入图片的描述"><br>现实与虚拟</p>
<p>当然，各式各样的 VR 周边设备也越来越多，如 Virtuix Omni 跑步机：<br> <img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/Virtuix%20Omni.gif" alt="此处输入图片的描述"><br>Virtuix Omni</p>
<p>这些设备无疑会增强了 VR 的体验，给用户带来更加刺激与逼真的体验。</p>
<h2 id="WebVR"><a href="#WebVR" class="headerlink" title="WebVR"></a>WebVR</h2><p>上文说了这么多关于 VR 的东西，视乎还没有入正题（⊙﹏⊙)）   </p>
<p>许多 VR 体验是以应用程序的形式呈现的，这意味着你在体验 VR 前，必须进行搜索与下载。而 Web VR 则改变了这种形式，它将 VR  体验搬进了浏览器，Web + VR = WebVR。  </p>
<p>下面根据我目前的见解，分析一下 WebVR 的现状。</p>
<h3 id="WebVR-草案"><a href="#WebVR-草案" class="headerlink" title="WebVR 草案"></a>WebVR 草案</h3><blockquote>
<p>WebVR 是早期和实验性的 JavaScript API，它提供了访问如 Oculus Rift 和 Google Cardboard 等 VR 设备功能的 API。</p>
</blockquote>
<p>VR 应用需要高精度、低延迟的接口，才能传递一个可接受的体验。而对于类似 Device Orientation Event 接口，虽然能获取浅层的 VR 输入，但这并不能为高品质的 VR 提供必要的精度要求。WebVR 提供了专门访问 VR 硬件的接口，让开发者能构建舒适的 VR 体验。</p>
<p>WebVR API 目前可用于安装了 Firefox nightly 的 Oculus Rift、Chrome 的实验性版本和 Samsung Gear VR 的浏览器。当然，如果你现在就想在你的移动端浏览器体验 WebVR，可以使用 <a href="https://github.com/borismus/webvr-polyfill" target="_blank" rel="external">WebVR Polyfill</a>。</p>
<h3 id="WebVR-开发"><a href="#WebVR-开发" class="headerlink" title="WebVR 开发"></a>WebVR 开发</h3><p>在 Web 上开发 VR 应用，有下面三种（潜在）方式：</p>
<ol>
<li>JavaScript, Three.js 与 监听设备方向（Device Orientation）</li>
<li>JavaScript, Three.js 与 WebVR</li>
<li>CSS 与 WebVR（仍处于非常早期阶段）</li>
</ol>
<p>由于 WebVR 仍处于草案阶段并可能会有所改变，所以建议你基于 <a href="https://github.com/borismus/webvr-boilerplate" target="_blank" rel="external">webvr-boilerplate</a> 进行 WebVR 开发。</p>
<h4 id="A-Frame"><a href="#A-Frame" class="headerlink" title="A-Frame"></a>A-Frame</h4><p>上面说道，在 Web 上开发 VR 应用有 3 种（潜在）方式，前两种都离不开直接接触 Three.js，而第三种方式则为时尚早。对于没接触过 Three.js，但又想体验一把 WebVR 开发的同学们来说，无疑会存在一定的门槛。</p>
<p>如果你想以较低的门槛体验一把 WebVR 开发，那么可以试试 <a href="https://mozvr.com/#team" target="_blank" rel="external">MozVR 团队</a> 开发的 A-Frame 框架。</p>
<p>PS：写着写着，A-Frame 的版本从 v0.2 升到到 v0.3（这很前端），但文档等各方面变得更加完善了。</p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://aframe.io/" target="_blank" rel="external">A-Frame</a> 是一个通过 HTML 创建 VR 体验的开源 WebVR 框架。通过该框架构建的 VR 场景能兼容智能手机、PC、 Oculus Rift 和 HTC Vive。</p>
<p>MozVR 团队开发的 A-Frame 框架的目的是：让构建 3D/VR 场景变得更易更快，以吸引 web 开发社区进入 WebVR 的生态。WebVR 要成功，需要有内容。但目前只有很少一部分 WebGL 开发者，却有数以百万的 Web 开发者与设计师。A-Frame 要把 3D/VR 内容的创造权力赋予给每个人。</p>
<h4 id="优势与特点"><a href="#优势与特点" class="headerlink" title="优势与特点"></a>优势与特点</h4><ul>
<li>A-Frame 能减少冗余代码。冗余复杂的代码成为了尝鲜者的障碍，A-Frame 将复杂冗余的代码减至一行 HTML 代码，如创建场景则只需一个 <code>&lt;a-scene&gt;</code> 标签。</li>
<li>A-Frame 是专为 Web 开发者设计的。它基于 DOM，因此能像其它 Web 应用一样操作 3D/VR 内容。当然，也能结合 box、d3、React 等 JavaScript 框架一起使用；</li>
<li>A-Frame 让代码结构化。Three.js 的代码通常是松散的，A-Frame 在 Three.js  之上构建了一个声明式的实体组件系统（entity-component-system）。另外，组件能发布并分享出去，其它开发者能以 HTML 的形式进行使用。</li>
</ul>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/asence.gif" alt="此处输入图片的描述"><br>减少冗余复杂的代码</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>talk is cheap，show me the c… hello world.</p>
<p><a href="http://codepen.io/mozvr/pen/BjygdO/" target="_blank" rel="external">A-Frame 的 Hello world</a><br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/aframe.gif" alt="此处输入图片的描述"><br>在手机的浏览器（如：Chrome、QQ浏览器）中呈现的效果</p>
<p>实现代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 引入aframe框架</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./aframe.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a-scene</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 球体 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-sphere</span> <span class="attr">position</span>=<span class="string">"0 1 -1"</span> <span class="attr">radius</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#EF2D5E"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sphere</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 盒（此处是立方体） --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-box</span> <span class="attr">width</span>=<span class="string">"1"</span> <span class="attr">height</span>=<span class="string">"1"</span> <span class="attr">rotation</span>=<span class="string">"0 45 0"</span> <span class="attr">depth</span>=<span class="string">"1"</span> <span class="attr">color</span>=<span class="string">"#4CC3D9"</span> <span class="attr">position</span>=<span class="string">"-1 0.5 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-box</span>&gt;</span>	</div><div class="line">  <span class="comment">&lt;!-- 圆柱 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-cylinder</span> <span class="attr">position</span>=<span class="string">"1 0.75 1"</span> <span class="attr">radius</span>=<span class="string">"0.5"</span> <span class="attr">height</span>=<span class="string">"1.5"</span> <span class="attr">color</span>=<span class="string">"#FFC65D"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-cylinder</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 平面 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-plane</span> <span class="attr">rotation</span>=<span class="string">"-90 0 0"</span> <span class="attr">width</span>=<span class="string">"4"</span> <span class="attr">height</span>=<span class="string">"4"</span> <span class="attr">color</span>=<span class="string">"#7BC8A4"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-plane</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- sky元用于为场景添加背景图或显示360度的全景图 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-sky</span> <span class="attr">color</span>=<span class="string">"#ECECEC"</span>&gt;</span><span class="tag">&lt;/<span class="name">a-sky</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 用于指定摄像机的位置 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a-entity</span> <span class="attr">position</span>=<span class="string">"0 0 4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a-camera</span>&gt;</span><span class="tag">&lt;/<span class="name">a-camera</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">a-entity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a-scene</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>基本概念（以 v0.3 版本为参考）：</p>
<ul>
<li>该框架的三维坐标轴遵循<strong>右手坐标系</strong>，具体如下图：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-webvr/coordinate.jpg" alt="此处输入图片的描述"></li>
<li>场景的原点默认在视口底边的中点</li>
<li>position 相当于 CSS3 中的 translate3d</li>
<li>以<strong>米</strong>为单位长度</li>
<li>height 与 width 是正面的长和宽，depth表示深度（厚度）</li>
<li>rotation=”x y z” 单位<strong>角度（°）</strong>，拇指指向坐标轴的正方向，其余手指卷起来的方向就是该轴的旋转正方向。</li>
<li>color 是材质颜色，默认是白色（#FFF）</li>
<li>在 PC 中，可通过鼠标与键盘 WSAD 进行交互</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>当然，上述案例只是 A-Frame 的 Hello World demo。若你感兴趣，可以深入学习，再结合自己的想法，相信你能作出让人拍手称赞的作品。</p>
<ul>
<li>A-Frame 官网：<a href="https://aframe.io/" target="_blank" rel="external">https://aframe.io/</a></li>
<li>A-Frame Blog：<a href="https://aframe.io/blog/" target="_blank" rel="external">https://aframe.io/blog/</a></li>
<li>Awesome A-Frame：<a href="https://github.com/aframevr/awesome-aframe" target="_blank" rel="external">https://github.com/aframevr/awesome-aframe</a></li>
</ul>
<h3 id="其它一些-WebVR-案例"><a href="#其它一些-WebVR-案例" class="headerlink" title="其它一些 WebVR 案例"></a>其它一些 WebVR 案例</h3><p>下面就列举一些 WebVR 的相关案例，如果你已具备了 VR 的体验环境，不妨体验一下。</p>
<ul>
<li><a href="https://www.beloola.com/" target="_blank" rel="external">Beloola</a>：Beloola 是一个基于 WebVR 的社交平台，它允许人们在同一个虚拟的空间上实时进行情感交流。</li>
<li><a href="https://sketchfab.com/" target="_blank" rel="external">Sketchfab</a>：Sketchfab 是一个不需任何插件即可在 Web 页面里嵌入交互式 3D 模型的服务网站。</li>
<li><a href="http://vizor.io/" target="_blank" rel="external">Vizor</a>：该网站提供了可视化编辑器，让任何人都能在浏览器上创建和分享他们的 VR 内容。</li>
<li><a href="http://vr.chromeexperiments.com/" target="_blank" rel="external">Chrome Experiments for Virtual Reality</a>：Chrome 团队提供的 6 个 VR 案例。</li>
<li>…</li>
</ul>
<p>更多 WebVR 内容等着你们发现</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>许多人将 2016 年称为 VR 元年。VR 的前景有人看好，也有人看衰。但无论如何，新技术的出现都值得我们去体验一番。当然，作为一名开发者，也可以从代码的角度体验一番。</p>
<p>想详细了解更多关于 VR 的行业报告，可以阅读 <a href="http://tech.qq.com/a/20160202/011274.htm" target="_blank" rel="external">《VR与AR：解读下一个通用计算平台》</a>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://webvr.info/" target="_blank" rel="external">WebVR.info</a></li>
<li><a href="https://aframe.io/" target="_blank" rel="external">A-Frame</a></li>
<li><a href="https://www.sitepoint.com/how-to-build-vr-on-the-web-today/" target="_blank" rel="external">How to Build VR on the Web Today</a></li>
<li><a href="http://tech.qq.com/a/20160202/011274.htm" target="_blank" rel="external">VR与AR：解读下一个通用计算平台</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“目镜在他眼前涂上了一抹朦胧的淡色，映射着一幅弯曲的广角画面：一条灯火辉煌的大街，伸向无尽的黑暗。但这大街其实并不存在，它只是电脑绘出的一片虚拟的空间。”——《Snow Crash》，Neal Stephenson 1992年&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="webvr" scheme="https://aotu.io/tags/webvr/"/>
    
      <category term="vr" scheme="https://aotu.io/tags/vr/"/>
    
  </entry>
  
  <entry>
    <title>CSS 3D Panorama - 淘宝造物节技术剖析</title>
    <link href="https://aotu.io/notes/2016/08/24/2016-8-24-css-3d-panorama/"/>
    <id>https://aotu.io/notes/2016/08/24/2016-8-24-css-3d-panorama/</id>
    <published>2016-08-24T10:58:35.000Z</published>
    <updated>2016-11-28T19:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>3D 全景并不是什么新鲜事物了，但以前我们在 Web 上看到的 3D 全景一般是通过 Flash 实现的。若我们能将 <code>CSS3 Transform</code> 的相关知识运用得当，也是能实现类似的效果。换句话说，3D 全景其实就是 CSS3 3D 的应用场景之一。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在实现 CSS3 3D 全景之前，我们先理清部分 CSS3 Transform 属性：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin" target="_blank" rel="external">transform-origin</a>：元素变形的原点（默认值为 50% 50% 0，该数值和后续提及的百分比均默认基于元素自身的宽高算出具体数值）；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="external">perspective</a>: 指定了观察者与 <code>z=0</code> 平面的距离，使具有三维位置变换的元素产生透视效果。（默认值：none，值只能是绝对长度，即负数是非法值）；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style" target="_blank" rel="external">transform-style</a>：用于指定其为子元素提供 2D 还是 3D 的场景。另外，该属性是非继承的；</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="external">transform</a>：该属性能让你修改 CSS 可视化模型的坐标空间，其中包括 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d" target="_blank" rel="external">平移（translate）</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate" target="_blank" rel="external">旋转（rotate）</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale" target="_blank" rel="external">缩放（scale）</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew" target="_blank" rel="external">扭曲（skew）</a>。</li>
</ul>
<p>下面对上述的一些点进行更深入的分析：</p>
<ul>
<li><p>对于 <code>perspective</code>，该属性指定了“眼睛”与元素的 <code>perspective-origin</code> （默认值是 <code>50% 50%</code>）点的距离。那么问题来了：“当我们应用 <code>px</code> 作为衡量单位时，那它的实际距离该如何量化呢（即如何得到我们熟悉且易于表达的距离）？”<br>答：当我们的屏幕的分辨率是 1080P（1920*1080px），且该元素或祖先元素的 perspective 值是 <code>1920px</code> 时，该应用了 CSS3 3D Transform 的元素的立体效果就相当于我们在距离一个屏幕宽度（1920px）的屏幕前观看该元素的真实效果。尽管如此，目前我也不清楚如何准确地为元素设置一个合适的 <code>perspective</code> 值，只能猜测个大概值，然后再动态修改值，以达到满意的呈现效果。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/perspective.jpg" alt="此处输入图片的描述"><br>根据 <a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BC%BC%E4%B8%89%E8%A7%92%E5%BD%A2" target="_blank" rel="external">相似三角形</a> 的性质可计算出被前移的元素最终在屏幕上显示的实际大小  </p>
<p> 另外，关于 <code>perspective</code> 还有另外一个重要的点。因为，perspective-origin 的默认值是 <code>50% 50%</code>，因此，对哪个元素应用 <code>perspective</code> 属性，就决定了“眼睛”的位置（即我们的“眼睛”是在哪个角度看物体）。一般来说，当我们需要正视物体时，就会将该属性设置在与该元素中心重合的<strong>某一祖先元素</strong>上。</p>
<p> 再另外，如果说：“如何让一个元素（的背面）不可见？”，你可能会说 <code>backface-visibility:hidden;</code>。其实，对于在“眼睛”背后的元素（以元素的 <code>transform-origin</code> 为参考点），即元素的z轴坐标值大于 perspective 的值，浏览器是不会将其渲染出来的。</p>
</li>
<li><p>对于 <code>transform-style</code>，该属性指定了其<strong>子元素</strong>是处于 3D 场景还是 2D 场景。对于 2D 场景，元素的前后位置是按照平时的渲染方式（即若在普通文档流中，是按照代码中元素的先后顺序，后面的元素会遮住在其前面的元素）；对于 3D 场景，元素的前后位置则按照真实世界的规则排序（即越靠近“眼睛”的，会遮住离“眼睛”更远的元素）。</p>
<p> 另外，由于 <code>transform-style</code> 属性是非继承的，对于中间节点需要显式设定。</p>
</li>
<li><p>对于 <code>transform</code> 属性：下图整理了 rotate3d、translate3d 的变换方向：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/transform.jpg" alt="transform"><br>transform 中的变换属性的顺序是有关系的，如 translateX(10px) rotate(30deg) 与 rotate(30deg) translateX(10px) 是不等价的。</p>
<p> 另外，需要注意的是 scale 中如果有负数值，则该方向会产生 180 度的翻转；</p>
<p> 再另外，部分 transform 效果会导致元素（字体）模糊，如 translate 的数值存在小数、通过 translateZ 或 scale 放大元素等等。<strong>每个浏览器都有其不同的表现</strong>。</p>
</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>上面理清了一些 CSS Transform 的知识点，下面就讲讲如何实现 CSS 3D 全景 ：</p>
<p>想象一下，当我们站在十字路口中间，身体不动，头部旋转 360°，这个过程中所看到的画面就形成了一幅以你为中心的全景图了。其实，当焦距不变时，我们就等同于站在一个圆柱体的中心。  </p>
<p>但是，虚拟世界与现实的最大不同是：没有东西是连续的，即所有东西都是离散的。例如，你无法在屏幕上显示一个完美的圆。你只能以一个正多边形表示圆：边越多，圆就越“完美”。 </p>
<p>同理，在三维空间，每个 3D 模型都等同于一个多面体（即 3D 模型只能由不弯曲的平面组成）。当我们讨论一个本身就是多面体（如立方体）的模型时并不足以为奇，但当我们想展示其它模型时，如球体时，就需要记住这个原理了。<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/ball.png" alt="三维环境的球体"></p>
<p><a href="http://zwj360.im20.com.cn" target="_blank" rel="external">淘宝造物节的活动页</a> 就是 CSS 3D 全景的一个很赞的页面，它将全景图分隔成 20 等份，相邻的元素间差 18°（360/20）。需要注意的是：我们要确保<strong>每个元素的正面是指向圆柱中心的，</strong>所以要计算好每等份的旋转角度值。然后再将元素向外（即 Z 轴方向）平移 <code>r</code> px。对于立方体 <code>r</code> 就是 <code>边长/2</code>，而对于其它更复杂的正多面体呢？  </p>
<p>举例：对于正九面体，每个元素的宽为 <code>210px</code>，对应的角度为 <code>40°</code>，即如下图：<br>图片来自：<a href="https://desandro.github.io/3dtransforms/docs/carousel.html" target="_blank" rel="external">https://desandro.github.io/3dtransforms/docs/carousel.html</a><br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/diagram.png" alt="此处输入图片的描述"><br>正九面体的俯视图  </p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/calc.png" alt="此处输入图片的描述"><br>计算过程  </p>
<p>由此得到一个公用函数，只需传入含有<strong>元素的宽度</strong>和<strong>元素数量</strong>的对象，即可得到 <code>r</code> 值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calTranslateZ</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(opts.width / (<span class="number">2</span> * <span class="built_in">Math</span>.tan(<span class="built_in">Math</span>.PI / opts.number)))</div><div class="line">&#125;</div><div class="line"></div><div class="line">calTranlateZ(&#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">210</span>,</div><div class="line">    <span class="attr">number</span>: <span class="number">9</span></div><div class="line">&#125;);  <span class="comment">// 288</span></div></pre></td></tr></table></figure></p>
<p><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/expand4.gif" alt="俯视时所看到的元素外移动画"><br>俯视时所看到的元素外移动画  </p>
<p>另外，为了让下文易于理解，我们约定 html 结构是：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#view</span>(<span class="attribute">perspective</span>:<span class="number">1000px</span>)</div><div class="line">    <span class="selector-id">#stage</span>(<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d)</div><div class="line">        <span class="selector-id">#cube</span>(<span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d)</div><div class="line">            <span class="selector-class">.div</span>（<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;<span class="attribute">height</span>:<span class="number">600px</span>;） <span class="comment">/*组成立方体的元素*/</span></div></pre></td></tr></table></figure></p>
<p>正多面体构建完成后，就需要将我们的“眼睛”放置在正多面体内。由于在“眼睛”后的元素是不会被浏览器所渲染的（与 <code>.div元素</code> 是否设置 <code>backface-visibility:hidden;</code> 无关），且我们保证了 <code>.div元素</code> 的<strong>正面</strong>都指向了正多面体的中心，这就形成 360° 被环绕的效果了。<br>那“眼睛”具体是被放置在哪个位置呢？<br>答：通过设置 <code>#stage</code> 元素的 translateZ 的值，让不能被看到的 <code>.div元素</code> 的 Z 轴坐标值大于 perspective 的值即可。如：立方体的正面的 translateZ 是 -300px（为了保证立方体的正面是指向立方体中心，正面元素需要设置 <code>rotateY(-180deg) translateZ(-300px)</code>，即正面元素向“眼球”方向平移了 300px），而 #view 的 perspective 的值为 1000px，那么 #stage 的 translateZ 的值应该大于 700px 且小于 1300px，具体数值则取决于你想要呈现的效果了。</p>
<p>根据上述知识，我粗略地模仿了“造物节”的效果：<a href="http://jdc.jd.com/lab/zaowu/index_new.html" target="_blank" rel="external">http://jdc.jd.com/lab/zaowu/index_new.html</a></p>
<p>其实，只需 6 幅图就可以实现一张常见的无死角全景图。<br>我自己又试验了下：<a href="http://jdc.jd.com/lab/zaowu/index2.html" target="_blank" rel="external">http://jdc.jd.com/lab/zaowu/index2.html</a>   </p>
<p>可由下图看出，将水平的 4 张图片合成后就是一张全景图：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/panorama3d.jpg" alt="此处输入图片的描述"></p>
<p>理解上述知识后，就可以通过为元素设置合适的 CSS3 Transform 属性值，即可实现一张可交互的全景图了。当然，交互的效果可以是拖拽，也可以是重力感应等。</p>
<p>正如在上文提到的：“没有东西是连续的，即所有东西都是离散的…”。将《造物节》与后续全景图的水平方向上的图片分别合成一张图后，可以发现：图片数量越多，图片的要求也越低。你觉得呢？<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/zaowujie.jpg" alt="淘宝造物节整体效果图"><br>造物节全景图</p>
<h3 id="全景图素材的制作"><a href="#全景图素材的制作" class="headerlink" title="全景图素材的制作"></a>全景图素材的制作</h3><p>将全景图制作分为设计类与实景类：</p>
<h4 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h4><p>要制作类似 <a href="http://zwj360.im20.com.cn" target="_blank" rel="external">《淘宝造物节》</a> 的全景页面，设计稿需要有以下这些要求。</p>
<p>注：下面提及的具体数据均基于《造物节》，可根据自身要求进行调整（若发现欠缺，欢迎作出补充）。</p>
<p>整体背景设计图如下（2580*1170px，被分成 20 等份）：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/zaowujie.jpg" alt="淘宝造物节整体效果图"></p>
<p>基本要求：</p>
<ol>
<li>水平方向上需要首尾相连；</li>
<li>因为效果图最终需要切成 <strong>N 等份</strong>，所以尽可能让 <strong>设计图的宽度能被 N 整除</strong>；</li>
<li>图片尺寸不仅要考虑正视图的大小，还要考虑元素在旋转时依然能覆盖视野（可选）。</li>
</ol>
<p>当然，上图只是背景图，还可以添加一些小物体素材（通过运动速度的差异形成视差，增强立体效果），如：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/item3.jpg" alt="物体小元素1"><br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/item1.jpg" alt="物体小元素2"><br>小物体元素（虚线是用于参考的，造物节中共有 21 个小物体）</p>
<p>如上图所示，每个图片也是被等分成 M 等份。当然，M 取决于物体在背景上的具体位置和本身大小。<br>另外，M 的宽度是与 N 的宽度相等的。尽管部分物体（M&gt;1）的两侧等份的图案占比小，但建议保留同样的宽度。  </p>
<p>注：如果小物体有特殊的变形效果，应该备注具体变形参数。</p>
<p>对于顶部和底图图片，则无特殊要求。</p>
<h4 id="实景类"><a href="#实景类" class="headerlink" title="实景类"></a>实景类</h4><p>如果想制作实景的全景，可以看看 Google 街景：<br><a href="https://www.google.com/streetview/publish/" target="_blank" rel="external">Google 街景</a> 推荐的设备如下：<br><img src="https://misc.aotu.io/JChehe/2016-8-24-css-3d-panorama/panorama_machine.jpg" alt="此处输入图片的描述"></p>
<p>如上图，最实惠的就是最后一个选项—— <a href="https://www.google.com/streetview/apps/" target="_blank" rel="external">Google 街景 APP</a>，该应用内部提供了全景相机功能，但正如图片介绍所说，这是需要练习的，因此对操作要求比较高。</p>
<p>补充：<br>上周六（2016.8.20）参加了 TGDC 的分享会，嘉宾分享了他们处理全景的方式：</p>
<ol>
<li>利用 RICOH THETA S 等专业设备拍出全景图</li>
<li>导出静态图像</li>
<li>利用设备专门提供的 APP 或 krpamo tools、pano2vr、Glsky box 等工具将静态图像转为6张图</li>
<li>利用 Web 技术制作可交互的全景图</li>
</ol>
<p>其中 Web 技术有以下3种可选方式（当然，还有其它）：</p>
<ul>
<li>CSS3（本文所提及的方式）</li>
<li>Three.js</li>
<li>krpano（为全景而生，低级浏览器则回退到 Flash），<a href="http://krpano.com/docu/tutorials/quickstart/?from=groupmessage&amp;isappinstalled=0#top" target="_blank" rel="external">查看教程</a></li>
</ul>
<p>当时，嘉宾现场快速制作的 <a href="http://wt.qq.com/act/tgdc_lottery/lottery.html" target="_blank" rel="external">会议现场全景</a>。</p>
<p>可见，优秀硬件设备的出现，大大减少了后期处理的时间，而 Web 则提供了一个很好的展现平台。</p>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>随着终端设备的软硬件不断完善和提高，Web 在 3D 领域也不甘落后，如果你玩腻了 2D 的 H5 或者想为用户提供更加新颖优秀的体验，全景也许是一种选择。</p>
<p>最后，如有不清晰或不明白的地方，可以联系我，我会尽可能解决的。谢谢谢~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;3D 全景并不是什么新鲜事物了，但以前我们在 Web 上看到的 3D 全景一般是通过 Flash 实现的。若我们能将 &lt;code&gt;CSS3 
    
    </summary>
    
      <category term="Web开发" scheme="https://aotu.io/cates/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="https://aotu.io/tags/CSS/"/>
    
      <category term="panorama" scheme="https://aotu.io/tags/panorama/"/>
    
      <category term="3d" scheme="https://aotu.io/tags/3d/"/>
    
  </entry>
  
</feed>
